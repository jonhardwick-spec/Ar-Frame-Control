<DOCUMENT filename="models\app_logic_model.dart">
import 'dart:async';
import 'dart:convert';
import 'package:collection/collection.dart';
import 'package:flutter/services.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter/foundation.dart';
import 'package:logging/logging.dart';
import 'package:noa/bluetooth.dart';
import 'package:noa/noa_api.dart';
import 'package:noa/util/state_machine.dart';
import 'package:shared_preferences/shared_preferences.dart';

final _log = Logger("App logic");

// NOTE Update these when changing firmware or scripts
const _firmwareVersion = "v25.080.0838";
const _scriptVersion = "v1.0.5";

enum State {
  getUserSettings,
  waitForLogin,
  scanning,
  found,
  connect,
  stopLuaApp,
  checkFirmwareVersion,
  uploadMainLua,
  uploadGraphicsLua,
  uploadStateLua,
  triggerUpdate,
  updateFirmware,
  requiresRepair,
  connected,
  disconnected,
  recheckFirmwareVersion,
  checkScriptVersion,
  sendResponseToDevice,
  logout,
  deleteAccount
}

enum Event {
  init,
  done,
  error,
  loggedIn,
  deviceFound,
  deviceLost,
  deviceConnected,
  updatableDeviceConnected,
  deviceDisconnected,
  deviceInvalid,
  buttonPressed,
  cancelPressed,
  logoutPressed,
  deletePressed,
  deviceUpToDate,
  deviceNeedsUpdate,
  noaResponse,
}

enum TuneLength {
  shortest('shortest'),
  short('short'),
  standard('standard'),
  long('long'),
  longest('longest');

  const TuneLength(this.value);
  final String value;
}

class AppLogicModel extends ChangeNotifier {
  // Public state variables
  StateMachine state = StateMachine(State.getUserSettings);
  NoaUser noaUser = NoaUser();
  double bluetoothUploadProgress = 0;
  String deviceName = "Device";
  List<NoaMessage> noaMessages = List.empty(growable: true);

  void setUserAuthToken(String token) {
    SharedPreferences.getInstance().then((value) async {
      await value.setString("userAuthToken", token);
      triggerEvent(Event.loggedIn);
    });
  }

  Future<String?> _getUserAuthToken() async {
    return await SharedPreferences.getInstance()
        .then((value) => value.getString('userAuthToken'));
  }

  void _setPairedDevice(String token) {
    SharedPreferences.getInstance().then((value) async {
      await value.setString("PairedDevice", token);
      triggerEvent(Event.loggedIn);
    });
  }

  Future<String?> _getPairedDevice() async {
    return await SharedPreferences.getInstance()
        .then((value) => value.getString('PairedDevice'));
  }

  // User's tune preferences
  String _tunePrompt = "";
  String get tunePrompt => _tunePrompt;
  set tunePrompt(String value) {
    _tunePrompt = value;
    () async {
      final savedData = await SharedPreferences.getInstance();
      savedData.setString("tunePrompt", _tunePrompt);
    }();
  }

  int _tuneTemperature = 50;
  int get tuneTemperature => _tuneTemperature;
  set tuneTemperature(int value) {
    _tuneTemperature = value;
    () async {
      final savedData = await SharedPreferences.getInstance();
      savedData.setInt("tuneTemperature", _tuneTemperature);
    }();
    notifyListeners();
  }

  bool _customServer = false;
  bool get customServer => _customServer;
  set customServer(bool value) {
    _customServer = value;
    SharedPreferences.getInstance()
        .then((sp) => sp.setBool("customServer", value));
    notifyListeners();
  }

  String _apiEndpoint = "";
  String get apiEndpoint => _apiEndpoint;
  set apiEndpoint(String value) {
    _apiEndpoint = value;
    SharedPreferences.getInstance()
        .then((sp) => sp.setString("apiEndpoint", value));
    notifyListeners();
  }

  String _apiToken = "";
  String get apiToken => _apiToken;
  set apiToken(String value) {
    _apiToken = value;
    SharedPreferences.getInstance()
        .then((sp) => sp.setString("apiToken", value));
    notifyListeners();
  }

  String _apiHeader = "";
  String get apiHeader => _apiHeader;
  set apiHeader(String value) {
    _apiHeader = value;
    SharedPreferences.getInstance()
        .then((sp) => sp.setString("apiHeader", value));
    notifyListeners();
  }

  TuneLength _tuneLength = TuneLength.standard;
  TuneLength get tuneLength => _tuneLength;
  set tuneLength(TuneLength value) {
    _tuneLength = value;
    () async {
      final savedData = await SharedPreferences.getInstance();
      savedData.setString("tuneLength", _tuneLength.name);
    }();
    notifyListeners();
  }

  late bool _textToSpeech;
  bool get textToSpeech => _textToSpeech;
  set textToSpeech(bool value) {
    _textToSpeech = value;
    SharedPreferences.getInstance()
        .then((sp) => sp.setBool("textToSpeech", value));
    notifyListeners();
  }

  late bool _promptless;
  bool get promptless => _promptless;
  set promptless(bool value) {
    _promptless = value;
    SharedPreferences.getInstance()
        .then((sp) => sp.setBool("promptless", value));
    notifyListeners();
  }

  // Private state variables
  StreamSubscription? _scanStream;
  StreamSubscription? _connectionStream;
  StreamSubscription? _luaResponseStream;
  StreamSubscription? _dataResponseStream;
  BrilliantScannedDevice? _nearbyDevice;
  BrilliantDevice? _connectedDevice;
  List<int> _audioData = List.empty(growable: true);
  List<int> _imageData = List.empty(growable: true);

  AppLogicModel() {
    // Uncomment to create AppStore images
    // noaMessages.add(NoaMessage(
    //   message: "Recommend me some pizza places I near Union Square",
    //   from: NoaRole.user,
    //   time: DateTime.now().add(const Duration(seconds: 2)),
    // ));

    // noaMessages.add(NoaMessage(
    //   message:
    //       "You might want to check out Bravo Pizza, Union Square Pizza, or Joe's Pizza for some good pizza near Union Square.",
    //   from: NoaRole.noa,
    //   time: DateTime.now().add(const Duration(seconds: 3)),
    // ));

    // noaMessages.add(NoaMessage(
    //   message: "Does Joe's have any good vegetarian options?",
    //   from: NoaRole.user,
    //   time: DateTime.now().add(const Duration(seconds: 4)),
    // ));

    // noaMessages.add(NoaMessage(
    //   message:
    //       "Joe's Pizza does offer vegetarian options, including a cheese-less veggie pie that's quite popular.",
    //   from: NoaRole.noa,
    //   time: DateTime.now().add(const Duration(seconds: 5)),
    // ));

    () async {
      noaMessages.add(NoaMessage(
        message: "Hey I'm Noa! Let's show you around",
        from: NoaRole.noa,
        time: DateTime.now(),
        exclude: true,
      ));

      noaMessages.add(NoaMessage(
          message: "Tap the side of your Frame to wake me up",
          from: NoaRole.noa,
          time: DateTime.now(),
          image: (await rootBundle.load('assets/images/tutorial/wake_up.png'))
              .buffer
              .asUint8List(),
          exclude: true));

      noaMessages.add(NoaMessage(
          message: "Tap again and ask me anything",
          from: NoaRole.noa,
          time: DateTime.now(),
          image: (await rootBundle.load('assets/images/tutorial/tap_start.png'))
              .buffer
              .asUint8List(),
          exclude: true));

      noaMessages.add(NoaMessage(
          message: "...and then a third time to finish",
          from: NoaRole.noa,
          time: DateTime.now(),
          image:
              (await rootBundle.load('assets/images/tutorial/tap_finish.png'))
                  .buffer
                  .asUint8List(),
          exclude: true));

      noaMessages.add(NoaMessage(
          message:
              "The response just takes a few seconds. Tap again to ask a follow up question",
          from: NoaRole.noa,
          time: DateTime.now(),
          image: (await rootBundle
                  .load('assets/images/tutorial/tap_follow_up.png'))
              .buffer
              .asUint8List(),
          exclude: true));

      noaMessages.add(NoaMessage(
          message: "The follow up just takes a few more seconds",
          from: NoaRole.noa,
          time: DateTime.now(),
          image: (await rootBundle.load('assets/images/tutorial/response.png'))
              .buffer
              .asUint8List(),
          exclude: true));
    }();
  }

  void triggerEvent(Event event) {
    state.event(event);

    do {
      switch (state.current) {
        case State.getUserSettings:
          state.onEntry(() async {
            try {
              // Load the user's Tune settings or defaults if none are set
              final savedData = await SharedPreferences.getInstance();
              _tunePrompt = savedData.getString('tunePrompt') ??
                  "You are Noa, a smart and witty personal AI assistant inside the user's AR smart glasses that answers all user queries and questions";
              _tuneTemperature = savedData.getInt('tuneTemperature') ?? 50;
              var len = savedData.getString('tuneLength') ?? 'standard';
              _tuneLength = TuneLength.values
                  .firstWhere((e) => e.toString() == 'TuneLength.$len');
              _textToSpeech = savedData.getBool('textToSpeech') ?? true;
              _apiEndpoint = savedData.getString('apiEndpoint') ?? "";
              _apiToken = savedData.getString('apiToken') ?? "";
              _apiHeader = savedData.getString('apiHeader') ?? "";
              _customServer = savedData.getBool('customServer') ?? false;
              _promptless = savedData.getBool('promptless') ?? false;

              // Check if the auto token is loaded and if Frame is paired
              if (await _getUserAuthToken() != null &&
                  await _getPairedDevice() != null) {
                noaUser = await NoaApi.getUser((await _getUserAuthToken())!);
                triggerEvent(Event.done);
                return;
              }
              throw ("Not logged in or paired");
            } catch (error) {
              _log.info(error);
              triggerEvent(Event.error);
            }
          });
          state.changeOn(Event.done, State.disconnected);
          state.changeOn(Event.error, State.waitForLogin);
          break;

        case State.waitForLogin:
          state.changeOn(Event.loggedIn, State.scanning,
              transitionTask: () async =>
                  noaUser = await NoaApi.getUser((await _getUserAuthToken())!));
          break;

        case State.scanning:
          state.onEntry(() async {
            await _scanStream?.cancel();
            _scanStream = BrilliantBluetooth.scan()
                .timeout(const Duration(seconds: 2), onTimeout: (sink) {
              _nearbyDevice = null;
              triggerEvent(Event.deviceLost);
            }).listen((device) {
              _nearbyDevice = device;
              deviceName = device.device.advName;
              triggerEvent(Event.deviceFound);
            });
          });
          state.changeOn(Event.deviceFound, State.found);
          state.changeOn(Event.cancelPressed, State.disconnected,
              transitionTask: () async => await BrilliantBluetooth.stopScan());
          break;

        case State.found:
          state.changeOn(Event.deviceLost, State.scanning);
          state.changeOn(Event.buttonPressed, State.connect);
          state.changeOn(Event.cancelPressed, State.disconnected,
              transitionTask: () async => await BrilliantBluetooth.stopScan());
          break;

        case State.connect:
          state.onEntry(() async {
            try {
              _connectedDevice =
                  await BrilliantBluetooth.connect(_nearbyDevice!);
              switch (_connectedDevice!.state) {
                case BrilliantConnectionState.connected:
                  triggerEvent(Event.deviceConnected);
                  break;
                case BrilliantConnectionState.dfuConnected:
                  triggerEvent(Event.updatableDeviceConnected);
                  break;
                default:
                  throw ();
              }
            } catch (_) {
              triggerEvent(Event.deviceInvalid);
            }
          });
          state.changeOn(Event.deviceConnected, State.stopLuaApp);
          state.changeOn(Event.updatableDeviceConnected, State.updateFirmware);
          state.changeOn(Event.deviceInvalid, State.requiresRepair);
          break;

        case State.stopLuaApp:
          state.onEntry(() async {
            try {
              await _connectedDevice!.sendBreakSignal();
              triggerEvent(Event.done);
            } catch (_) {
              triggerEvent(Event.error);
            }
          });
          state.changeOn(Event.done, State.checkFirmwareVersion);
          state.changeOn(Event.error, State.requiresRepair);
          break;

        case State.checkFirmwareVersion:
          state.onEntry(() async {
            try {
              final response = await _connectedDevice!
                  .sendString("print(frame.FIRMWARE_VERSION)")
                  .timeout(const Duration(seconds: 1));
              if (response == _firmwareVersion) {
                triggerEvent(Event.deviceUpToDate);
              } else {
                triggerEvent(Event.deviceNeedsUpdate);
              }
            } catch (_) {
              triggerEvent(Event.error);
            }
          });
          state.changeOn(Event.deviceUpToDate, State.uploadMainLua);
          state.changeOn(Event.deviceNeedsUpdate, State.triggerUpdate);
          state.changeOn(Event.error, State.requiresRepair);
          break;

        case State.uploadMainLua:
          state.onEntry(() async {
            try {
              await _connectedDevice!.uploadScript(
                'main.lua',
                'assets/lua_scripts/main.lua',
              );
              triggerEvent(Event.done);
            } catch (_) {
              triggerEvent(Event.error);
            }
          });

          state.changeOn(Event.done, State.uploadGraphicsLua);
          state.changeOn(Event.error, State.requiresRepair);
          break;

        case State.uploadGraphicsLua:
          state.onEntry(() async {
            try {
              await _connectedDevice!.uploadScript(
                'graphics.lua',
                'assets/lua_scripts/graphics.lua',
              );
              triggerEvent(Event.done);
            } catch (_) {
              triggerEvent(Event.error);
            }
          });

          state.changeOn(Event.done, State.uploadStateLua);
          state.changeOn(Event.error, State.requiresRepair);
          break;

        case State.uploadStateLua:
          state.onEntry(() async {
            try {
              await _connectedDevice!.uploadScript(
                'state.lua',
                'assets/lua_scripts/state.lua',
              );
              await _connectedDevice!.sendResetSignal();
              _setPairedDevice(_connectedDevice!.device.remoteId.toString());
              triggerEvent(Event.done);
            } catch (_) {
              triggerEvent(Event.error);
            }
          });

          state.changeOn(Event.done, State.connected);
          state.changeOn(Event.error, State.requiresRepair);
          break;

        case State.triggerUpdate:
          state.onEntry(() async {
            try {
              await _connectedDevice!.sendString(
                "frame.update()",
                awaitResponse: false,
              );
            } catch (_) {
              triggerEvent(Event.error);
            }
            await _scanStream?.cancel();
            _scanStream = BrilliantBluetooth.scan().listen((device) {
              _nearbyDevice = device;
              triggerEvent(Event.deviceFound);
            });
          });
          state.changeOn(Event.deviceFound, State.connect,
              transitionTask: () async => await BrilliantBluetooth.stopScan());
          state.changeOn(Event.error, State.requiresRepair);
          break;

        case State.updateFirmware:
          state.onEntry(() async {
            _connectedDevice!
                .updateFirmware("assets/frame-firmware-$_firmwareVersion.zip")
                .listen(
              (value) {
                bluetoothUploadProgress = value;
                notifyListeners();
              },
              onDone: () async {
                try {
                  await _scanStream?.cancel();
                  _scanStream = BrilliantBluetooth.scan().listen((device) {
                    _nearbyDevice = device;
                    triggerEvent(Event.deviceFound);
                  });
                } catch (error) {
                  triggerEvent(Event.error);
                }
              },
              onError: (_) async {
                await _connectedDevice?.disconnect();
                triggerEvent(Event.error);
              },
              cancelOnError: true,
            );
          });
          state.changeOn(Event.deviceFound, State.connect);
          state.changeOn(Event.error, State.requiresRepair);
          break;

        case State.requiresRepair:
          state.changeOn(Event.buttonPressed, State.scanning);
          state.changeOn(Event.cancelPressed, State.disconnected);
          break;

        case State.connected:
          state.onEntry(() async {
            _connectionStream?.cancel();
            _connectionStream =
                _connectedDevice!.connectionState.listen((event) {
              _connectedDevice = event;
              if (event.state == BrilliantConnectionState.disconnected) {
                triggerEvent(Event.deviceDisconnected);
              }
            });
            _connectionStream?.onError((_) {});

            _luaResponseStream?.cancel();
            _luaResponseStream =
                _connectedDevice!.stringResponse.listen((event) {});

            _dataResponseStream?.cancel();
            _dataResponseStream =
                _connectedDevice!.dataResponse.listen((event) async {
              String getTunePrompt() {
                String prompt = "";
                if (_tunePrompt != "") {
                  prompt += "$_tunePrompt. ";
                }

                switch (_tuneLength) {
                  case TuneLength.shortest:
                    prompt += "Limit responses to 1 to 3 words. ";
                    break;
                  case TuneLength.short:
                    prompt += "Limit responses to 1 sentence. ";
                    break;
                  case TuneLength.standard:
                    prompt += "Limit responses to 1 to 2 sentences. ";
                    break;
                  case TuneLength.long:
                    prompt += "Limit responses to 1 short paragraph. ";
                    break;
                  case TuneLength.longest:
                    prompt += "Limit responses to 2 paragraphs. ";
                    break;
                }
                return prompt;
              }

              switch (event[0]) {
                case 0x10:
                  _log.info("Received user generation request from device");
                  _audioData.clear();
                  _imageData.clear();
                  break;
                case 0x12:
                  _log.info("Received wildcard request from device");
                  try {
                    noaMessages += await NoaApi.getWildcardMessage(
                      (await _getUserAuthToken())!,
                      getTunePrompt(),
                      _tuneTemperature / 50,
                      textToSpeech,
                    );
                    noaUser =
                        await NoaApi.getUser((await _getUserAuthToken())!);
                    triggerEvent(Event.noaResponse);
                  } catch (_) {}
                  break;
                case 0x13:
                  _audioData += event.sublist(1);
                  break;
                case 0x14:
                  _imageData += event.sublist(1);
                  break;
                case 0x15:
                  _log.info(
                      "Received all data from device. ${_audioData.length} bytes of audio, ${_imageData.length} bytes of image");
                  try {
                    final newMessages = await NoaApi.getMessage(
                        (await _getUserAuthToken())!,
                        Uint8List.fromList(_audioData),
                        Uint8List.fromList(_imageData),
                        getTunePrompt(),
                        _tuneTemperature / 50,
                        noaMessages,
                        textToSpeech,
                        apiEndpoint,
                        apiHeader,
                        apiToken,
                        customServer,
                        promptless);
                    final topicChanged =
                        newMessages.where((msg) => msg.topicChanged).isNotEmpty;
                    if (topicChanged) {
                      for (var msg in noaMessages) {
                        msg.exclude = true;
                      }
                    }
                    noaMessages += newMessages;
                    noaUser =
                        await NoaApi.getUser((await _getUserAuthToken())!);
                    triggerEvent(Event.noaResponse);
                  } catch (_) {}
                  break;
              }
            });
          });

          state.changeOn(Event.noaResponse, State.sendResponseToDevice);
          state.changeOn(Event.deviceDisconnected, State.disconnected);
          state.changeOn(Event.logoutPressed, State.logout);
          state.changeOn(Event.deletePressed, State.deleteAccount);
          break;

        case State.sendResponseToDevice:
          state.onEntry(() async {
            try {
              final splitString = utf8
                  .encode(noaMessages.last.message)
                  .slices(_connectedDevice!.maxDataLength! - 1);
              for (var slice in splitString) {
                List<int> data = slice.toList()..insert(0, 0x20);
                await _connectedDevice!
                    .sendData(data)
                    .timeout(const Duration(seconds: 1));
                await Future.delayed(const Duration(milliseconds: 50));
              }
              await Future.delayed(const Duration(milliseconds: 300));
            } catch (_) {}
            triggerEvent(Event.done);
          });

          state.changeOn(Event.done, State.connected);
          state.changeOn(Event.logoutPressed, State.logout);
          state.changeOn(Event.deletePressed, State.deleteAccount);
          break;

        case State.disconnected:
          state.onEntry(() async {
            _connectionStream?.cancel();
            _connectionStream =
                _connectedDevice?.connectionState.listen((event) {
              _connectedDevice = event;
              if (event.state == BrilliantConnectionState.connected) {
                triggerEvent(Event.deviceConnected);
              }
            });
            _connectionStream?.onError((_) {});

            try {
              _connectedDevice ??= await BrilliantBluetooth.reconnect(
                  (await _getPairedDevice())!);
              if (_connectedDevice?.state ==
                  BrilliantConnectionState.connected) {
                triggerEvent(Event.deviceConnected);
              }
            } catch (_) {}
          });
          state.changeOn(Event.deviceConnected, State.recheckFirmwareVersion);
          state.changeOn(Event.logoutPressed, State.logout);
          state.changeOn(Event.deletePressed, State.deleteAccount);
          break;

        case State.recheckFirmwareVersion:
          state.onEntry(() async {
            _dataResponseStream?.cancel();
            _dataResponseStream =
                _connectedDevice!.dataResponse.listen((event) async {
              _log.info("Firmware version: ${utf8.decode(event.sublist(1))}");
              if (utf8.decode(event.sublist(1)) == _firmwareVersion) {
                triggerEvent(Event.deviceUpToDate);
              } else {
                triggerEvent(Event.deviceNeedsUpdate);
              }
            });
            try {
              await _connectedDevice!
                  .sendData(List<int>.filled(1, 0x16))
                  .timeout(const Duration(seconds: 1));
            } catch (_) {
              triggerEvent(Event.error);
            }
          });
          state.changeOn(Event.deviceUpToDate, State.checkScriptVersion);
          state.changeOn(Event.deviceNeedsUpdate, State.stopLuaApp);
          state.changeOn(Event.error, State.stopLuaApp);
          state.changeOn(Event.logoutPressed, State.logout);
          break;

        case State.checkScriptVersion:
          state.onEntry(() async {
            _dataResponseStream?.cancel();
            _dataResponseStream =
                _connectedDevice!.dataResponse.listen((event) async {
              _log.info("Script version: ${utf8.decode(event.sublist(1))}");
              if (utf8.decode(event.sublist(1)) == _scriptVersion) {
                triggerEvent(Event.deviceUpToDate);
              } else {
                triggerEvent(Event.deviceNeedsUpdate);
              }
            });
            try {
              await _connectedDevice!
                  .sendData(List<int>.filled(1, 0x17))
                  .timeout(const Duration(seconds: 1));
            } catch (_) {
              triggerEvent(Event.error);
            }
          });
          state.changeOn(Event.deviceUpToDate, State.connected);
          state.changeOn(Event.deviceNeedsUpdate, State.stopLuaApp);
          state.changeOn(Event.error, State.stopLuaApp);
          state.changeOn(Event.logoutPressed, State.logout);
          break;

        case State.logout:
          state.onEntry(() async {
            try {
              await SharedPreferences.getInstance().then((sp) => sp.clear());
              await _connectedDevice?.disconnect();
              await NoaApi.signOut((await _getUserAuthToken())!);
              noaMessages.clear();
              triggerEvent(Event.done);
            } catch (error) {
              _log.warning("Error logging out. $error");
              triggerEvent(Event.done);
            }
          });
          state.changeOn(Event.done, State.getUserSettings);
          break;

        case State.deleteAccount:
          state.onEntry(() async {
            try {
              await _connectedDevice?.disconnect();
              await NoaApi.deleteUser((await _getUserAuthToken())!);
              await SharedPreferences.getInstance().then((sp) => sp.clear());
              noaMessages.clear();
              triggerEvent(Event.done);
            } catch (error) {
              _log.warning("Error deleting account. $error");
              triggerEvent(Event.done);
            }
          });
          state.changeOn(Event.done, State.getUserSettings);
          break;
      }
    } while (state.changePending());

    notifyListeners();
  }

  @override
  void dispose() {
    BrilliantBluetooth.stopScan();
    super.dispose();
  }
}

final model = ChangeNotifierProvider<AppLogicModel>((ref) {
  return AppLogicModel();
});

</DOCUMENT>
<DOCUMENT filename="pages\account.dart">
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter/material.dart';
import 'package:noa/models/app_logic_model.dart' as app;
import 'package:noa/pages/regulatory.dart';
import 'package:noa/pages/splash.dart';
import 'package:noa/style.dart';
import 'package:noa/util/switch_page.dart';
import 'package:noa/widgets/top_title_bar.dart';
import 'package:url_launcher/url_launcher.dart';

Widget _accountInfoText(String title, String detail) {
  return Padding(
    padding: const EdgeInsets.only(bottom: 42),
    child: Column(
      children: [
        Text(title, style: textStyleLightSubHeading),
        Text(detail, style: textStyleDarkTitle),
      ],
    ),
  );
}

Widget _linkedFooterText(String text, bool redText, Function action) {
  return Padding(
    padding: const EdgeInsets.only(top: 8),
    child: GestureDetector(
      onTap: () => action(),
      child: Text(
        text,
        style: redText ? textStyleRed : textStyleDark,
      ),
    ),
  );
}

class AccountPage extends ConsumerWidget {
  const AccountPage({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return Scaffold(
      backgroundColor: colorWhite,
      appBar: topTitleBar(context, 'ACCOUNT', false, true),
      body: Column(
        children: [
          Center(
            child: Column(
              children: [
                _accountInfoText(
                    "Signed In As", ref.watch(app.model).noaUser.email),
                _accountInfoText("Credits Used",
                    "${ref.watch(app.model).noaUser.creditsUsed} / ${ref.watch(app.model).noaUser.maxCredits}"),
                _accountInfoText("Plan", ref.watch(app.model).noaUser.plan)
              ],
            ),
          ),
          Expanded(
            child: Padding(
              padding: const EdgeInsets.only(left: 42, bottom: 50),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.end,
                crossAxisAlignment: CrossAxisAlignment.stretch,
                children: [
                  _linkedFooterText("Tutorials", false, () async {
                    try {
                      await launchUrl(Uri.parse(
                          "https://www.youtube.com/playlist?list=PLfbaC5GRVJJgSPdN-KWndTld35tihu1Ic"));
                    } catch (_) {}
                  }),
                  _linkedFooterText("Logout", false, () async {
                    ref.read(app.model).triggerEvent(app.Event.logoutPressed);
                    if (context.mounted) {
                      Navigator.pop(context);
                      switchPage(context, const SplashPage());
                    }
                  }),
                  _linkedFooterText("Privacy Policy", false, () async {
                    try {
                      await launchUrl(Uri.parse(
                          "https://brilliant.xyz/pages/privacy-policy"));
                    } catch (_) {}
                  }),
                  _linkedFooterText("Terms & Conditions", false, () async {
                    try {
                      await launchUrl(Uri.parse(
                          "https://brilliant.xyz/pages/terms-conditions"));
                    } catch (_) {}
                  }),
                  _linkedFooterText("Regulatory", false, () async {
                    switchPage(context, const RegulatoryPage());
                  }),
                  _linkedFooterText("Delete Account", true, () {
                    // TODO ask user to confirm
                    ref.read(app.model).triggerEvent(app.Event.deletePressed);
                    if (context.mounted) {
                      Navigator.pop(context);
                      switchPage(context, const SplashPage());
                    }
                  }),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }
}

</DOCUMENT>
<DOCUMENT filename="pages\hack.dart">
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:noa/style.dart';
import 'package:noa/util/app_log.dart';
import 'package:noa/util/show_toast.dart';
import 'package:noa/widgets/bottom_nav_bar.dart';
import 'package:noa/widgets/top_title_bar.dart';

final ScrollController _bluetoothLogScrollController = ScrollController();
final ScrollController _appLogScrollController = ScrollController();

Widget _logTextBox(
  BuildContext context,
  String data,
  ScrollController controller,
) {
  return Expanded(
    child: GestureDetector(
      onLongPress: () async {
        await Clipboard.setData(ClipboardData(text: data));
        if (context.mounted) {
          showToast("Copied", context);
        }
      },
      child: Container(
        decoration: BoxDecoration(
          border: Border.all(color: colorLight),
          borderRadius: const BorderRadius.all(Radius.circular(10)),
        ),
        padding: const EdgeInsets.all(10),
        margin: const EdgeInsets.only(bottom: 28),
        width: double.infinity,
        child: SingleChildScrollView(
          controller: controller,
          scrollDirection: Axis.vertical,
          reverse: true,
          child: SingleChildScrollView(
            scrollDirection: Axis.horizontal,
            child: Text(
              data,
              style: textStyleLight,
            ),
          ),
        ),
      ),
    ),
  );
}

class HackPage extends ConsumerWidget {
  const HackPage({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _bluetoothLogScrollController.animateTo(
          _bluetoothLogScrollController.position.minScrollExtent,
          duration: const Duration(milliseconds: 100),
          curve: Curves.easeOut);
      _appLogScrollController.animateTo(
          _appLogScrollController.position.minScrollExtent,
          duration: const Duration(milliseconds: 100),
          curve: Curves.easeOut);
    });

    return Scaffold(
      backgroundColor: colorDark,
      appBar: topTitleBar(context, 'LOG', true, false),
      body: Padding(
        padding: const EdgeInsets.only(left: 42, right: 42),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Padding(
              padding: EdgeInsets.only(bottom: 10),
              child: Text("Bluetooth log", style: textStyleLightSubHeading),
            ),
            _logTextBox(
              context,
              ref.watch(appLog).bluetooth,
              _bluetoothLogScrollController,
            ),
            const Padding(
              padding: EdgeInsets.only(bottom: 10),
              child: Text("App log", style: textStyleLightSubHeading),
            ),
            _logTextBox(
              context,
              ref.watch(appLog).app,
              _appLogScrollController,
            ),
          ],
        ),
      ),
      bottomNavigationBar: bottomNavBar(context, 2, true),
    );
  }
}
</DOCUMENT>
<DOCUMENT filename="pages\login.dart">
import 'dart:io';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';
import 'package:noa/models/app_logic_model.dart' as app;
import 'package:noa/noa_api.dart';
import 'package:noa/pages/pairing.dart';
import 'package:noa/style.dart';
import 'package:noa/util/alert_dialog.dart';
import 'package:noa/util/location.dart';
import 'package:noa/util/sign_in.dart';
import 'package:noa/util/switch_page.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:webview_flutter/webview_flutter.dart';

TextSpan _clickableLink({required String text, required String url}) {
  return TextSpan(
    text: text,
    style: textStylePink,
    recognizer: TapGestureRecognizer()
      ..onTap = () async {
        try {
          await launchUrl(Uri.parse(url));
        } catch (_) {}
      },
  );
}

Widget _loginButton(
  BuildContext context,
  WidgetRef ref,
  String image,
  Function action,
) {
  return GestureDetector(
    onTap: () async {
      try {
        await InternetAddress.lookup('www.google.com');
        ref.read(app.model).setUserAuthToken(await action());
      } on SocketException catch (_) {
        if (context.mounted) {
          alertDialog(
            context,
            "Couldn't Sign In",
            "Noa requires an internet connection",
          );
        }
      } on NoaApiServerException catch (error) {
        if (context.mounted) {
          alertDialog(
            context,
            "Couldn't Sign In",
            "Server responded with an error: $error",
          );
        }
      } catch (_) {}
    },
    child: Padding(
      padding: const EdgeInsets.only(bottom: 20),
      child: Image.asset(image),
    ),
  );
}

class LoginPage extends ConsumerStatefulWidget {
  const LoginPage({super.key});

  @override
  ConsumerState<LoginPage> createState() => _LoginPageState();
}

class _LoginPageState extends ConsumerState<LoginPage> {
  late bool showWebview;

  @override
  void initState() {
    showWebview = false;
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      Location.requestPermission(context);
      if (ref.watch(app.model).state.current != app.State.waitForLogin) {
        switchPage(context, const PairingPage());
      }
    });

    return Scaffold(
      backgroundColor: colorDark,
      appBar: AppBar(
        backgroundColor: colorDark,
        title: Image.asset('assets/images/brilliant_logo.png'),
        centerTitle: true,
      ),
      body: Stack(
        children: [
          Column(
            children: [
              Expanded(child: Image.asset('assets/images/noa_logo.png')),
              Column(
                children: [
                  if (Platform.isIOS)
                    _loginButton(
                      context,
                      ref,
                      'assets/images/sign_in_with_apple_button.png',
                      SignIn().withApple,
                    ),
                  if (Platform.isIOS)
                    _loginButton(
                      context,
                      ref,
                      'assets/images/sign_in_with_google_button.png',
                      SignIn().withGoogle,
                    ),
                  GestureDetector(
                    onTap: () async {
                      try {
                        await InternetAddress.lookup('www.google.com');
                        setState(() => showWebview = true);
                      } on SocketException catch (_) {
                        if (context.mounted) {
                          alertDialog(
                            context,
                            "Couldn't Sign In",
                            "Noa requires an internet connection",
                          );
                        }
                      }
                    },
                    child: Padding(
                      padding: const EdgeInsets.only(bottom: 20),
                      child: Image.asset(
                          'assets/images/sign_in_with_email_button.png'),
                    ),
                  )
                ],
              )
            ],
          ),
          if (showWebview)
            Container(
              padding: const EdgeInsets.all(50),
              color: const Color(0xA0292929),
              child: Container(
                decoration: BoxDecoration(
                  border: Border.all(color: colorWhite, width: 2),
                ),
                child: WebViewWidget(
                  controller: WebViewController()
                    ..loadRequest(
                        Uri.parse("https://api.brilliant.xyz/noa/login?app=1"))
                    ..setJavaScriptMode(JavaScriptMode.unrestricted)
                    ..addJavaScriptChannel("userAuthToken",
                        onMessageReceived: (message) {
                      if (message.message == "cancelled") {
                        setState(() {
                          showWebview = false;
                        });
                      } else if (message.message != "") {
                        ref.read(app.model).setUserAuthToken(message.message);
                      }
                    }),
                ),
              ),
            )
        ],
      ),
      bottomNavigationBar: Padding(
        padding: const EdgeInsets.only(bottom: 48, top: 48),
        child: RichText(
          textAlign: TextAlign.center,
          text: TextSpan(
            children: <TextSpan>[
              const TextSpan(text: ''),
              _clickableLink(
                text: 'Privacy Policy',
                url: 'https://brilliant.xyz/pages/privacy-policy',
              ),
              const TextSpan(text: ' and ', style: textStyleWhite),
              _clickableLink(
                text: 'Terms and Conditions',
                url: 'https://brilliant.xyz/pages/terms-conditions',
              ),
              const TextSpan(text: ' of Noa.', style: textStyleWhite),
            ],
          ),
        ),
      ),
    );
  }
}

</DOCUMENT>
<DOCUMENT filename="pages\noa.dart">
import 'dart:async';

import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter/material.dart';
import 'package:noa/main.dart';
import 'package:noa/models/app_logic_model.dart' as app;
import 'package:noa/noa_api.dart';
import 'package:noa/pages/pairing.dart';
import 'package:noa/style.dart';
import 'package:noa/util/show_toast.dart';
import 'package:noa/util/switch_page.dart';
import 'package:noa/widgets/bottom_nav_bar.dart';
import 'package:noa/widgets/top_title_bar.dart';
import 'package:saver_gallery/saver_gallery.dart';
import 'package:uuid/uuid.dart';

final ScrollController _scrollController = ScrollController();

class NoaPage extends ConsumerWidget {
  const NoaPage({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      switch (ref.watch(app.model).state.current) {
        case app.State.stopLuaApp:
        case app.State.checkFirmwareVersion:
        case app.State.uploadMainLua:
        case app.State.uploadGraphicsLua:
        case app.State.uploadStateLua:
        case app.State.triggerUpdate:
        case app.State.updateFirmware:
          switchPage(context, const PairingPage());
          break;
        default:
      }
      Timer(const Duration(milliseconds: 100), () {
        if (context.mounted) {
          ref.watch(app.model.select((value) {
            if (value.noaMessages.length > 6) {
              _scrollController.animateTo(
                _scrollController.position.maxScrollExtent,
                duration: const Duration(milliseconds: 100),
                curve: Curves.easeOut,
              );
            }
          }));
        }
      });
    });

    return Scaffold(
      backgroundColor: colorWhite,
      appBar: topTitleBar(context, 'CHAT', false, false),
      body: PageStorage(
        bucket: globalPageStorageBucket,
        child: ListView.builder(
          key: const PageStorageKey<String>('noaPage'),
          controller: _scrollController,
          itemCount: ref.watch(app.model).noaMessages.length,
          itemBuilder: (context, index) {
            TextStyle style = textStyleLight;
            if (ref.watch(app.model).noaMessages[index].from == NoaRole.noa) {
              style = textStyleDark;
            }
            return Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                if (index == 0 ||
                    ref
                            .watch(app.model)
                            .noaMessages[index]
                            .time
                            .difference(ref
                                .watch(app.model)
                                .noaMessages[index - 1]
                                .time)
                            .inSeconds >
                        1700)
                  Container(
                    margin: const EdgeInsets.only(top: 40, left: 42, right: 42),
                    child: Row(
                      children: [
                        Text(
                          "${ref.watch(app.model).noaMessages[index].time.hour.toString().padLeft(2, '0')}:${ref.watch(app.model).noaMessages[index].time.minute.toString().padLeft(2, '0')}",
                          style: const TextStyle(color: colorLight),
                        ),
                        const Flexible(
                          child: Divider(
                            indent: 10,
                            color: colorLight,
                          ),
                        ),
                      ],
                    ),
                  ),
                Container(
                  margin: const EdgeInsets.only(top: 10, left: 65, right: 42),
                  child: Text(
                    ref.watch(app.model).noaMessages[index].message,
                    style: style,
                  ),
                ),
                if (ref.watch(app.model).noaMessages[index].image != null)
                  Container(
                    decoration: BoxDecoration(
                      border: Border.all(
                        color: colorLight,
                        width: 0.5,
                      ),
                      borderRadius: BorderRadius.circular(10.5),
                    ),
                    margin: const EdgeInsets.only(
                        top: 10, bottom: 10, left: 65, right: 65),
                    child: ClipRRect(
                      borderRadius: BorderRadius.circular(10),
                      child: SizedBox.fromSize(
                        child: GestureDetector(
                          onLongPress: () async {
                            await SaverGallery.saveImage(
                                ref.watch(app.model).noaMessages[index].image!,
                                name: const Uuid().v1(),
                                androidExistNotSave: false);
                            if (context.mounted) {
                              showToast("Saved to photos", context);
                            }
                          },
                          child: Image.memory(
                              ref.watch(app.model).noaMessages[index].image!),
                        ),
                      ),
                    ),
                  ),
              ],
            );
          },
          padding: const EdgeInsets.only(bottom: 20),
        ),
      ),
      bottomNavigationBar: bottomNavBar(context, 0, false),
    );
  }
}
</DOCUMENT>
<DOCUMENT filename="pages\pairing.dart">
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter/material.dart';
import 'package:noa/models/app_logic_model.dart' as app;
import 'package:noa/pages/noa.dart';
import 'package:noa/style.dart';
import 'package:noa/util/switch_page.dart';

class PairingPage extends ConsumerWidget {
  const PairingPage({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (ref.watch(app.model).state.current == app.State.connected ||
          ref.watch(app.model).state.current == app.State.disconnected) {
        switchPage(context, const NoaPage());
      }
    });

    String pairingBoxText = "";
    String pairingBoxButtonText = "";
    Image pairingBoxImage = Image.asset('assets/images/charge.gif');
    bool pairingBoxButtonEnabled = false;
    int updateProgress = ref.watch(app.model).bluetoothUploadProgress.toInt();
    String deviceName = ref.watch(app.model).deviceName;

    switch (ref.watch(app.model).state.current) {
      case app.State.scanning:
        pairingBoxText = "Bring your device close";
        pairingBoxButtonText = "Searching";
        pairingBoxImage = Image.asset('assets/images/charge.gif');
        pairingBoxButtonEnabled = false;
        break;
      case app.State.found:
        pairingBoxText = "$deviceName found";
        pairingBoxButtonText = "Pair";
        pairingBoxImage = Image.asset('assets/images/charge.gif');
        pairingBoxButtonEnabled = true;
        break;
      case app.State.connect:
      case app.State.stopLuaApp:
      case app.State.checkFirmwareVersion:
      case app.State.triggerUpdate:
        pairingBoxText = "$deviceName found";
        pairingBoxButtonText = "Connecting";
        pairingBoxImage = Image.asset('assets/images/charge.gif');
        pairingBoxButtonEnabled = false;
        break;
      case app.State.updateFirmware:
        pairingBoxText = "Updating software $updateProgress%";
        pairingBoxButtonText = "Keep your device close";
        pairingBoxImage = Image.asset('assets/images/charge.gif');
        pairingBoxButtonEnabled = false;
        break;
      case app.State.uploadMainLua:
        pairingBoxText = "Setting up Noa 50%";
        pairingBoxButtonText = "Keep your device close";
        pairingBoxImage = Image.asset('assets/images/charge.gif');
        pairingBoxButtonEnabled = false;
        break;
      case app.State.uploadGraphicsLua:
        pairingBoxText = "Setting up Noa 68%";
        pairingBoxButtonText = "Keep your device close";
        pairingBoxImage = Image.asset('assets/images/charge.gif');
        pairingBoxButtonEnabled = false;
        break;
      case app.State.uploadStateLua:
        pairingBoxText = "Setting up Noa 83%";
        pairingBoxButtonText = "Keep your device close";
        pairingBoxImage = Image.asset('assets/images/charge.gif');
        pairingBoxButtonEnabled = false;
        break;
      case app.State.requiresRepair:
        pairingBoxText = "Un-pair Frame first";
        pairingBoxButtonText = "Try again";
        pairingBoxImage = Image.asset('assets/images/repair.gif');
        pairingBoxButtonEnabled = true;
        break;
    }

    return Scaffold(
      backgroundColor: colorDark,
      appBar: AppBar(
        backgroundColor: colorDark,
        title: Image.asset('assets/images/brilliant_logo.png'),
      ),
      body: Column(
        children: [
          const Expanded(
            child: Center(
              child: Text("Setup your device", style: textStyleLightHeading),
            ),
          ),
          AspectRatio(
            aspectRatio: 1,
            child: Container(
              margin: const EdgeInsets.only(bottom: 22, left: 11, right: 11),
              decoration: const BoxDecoration(
                color: colorWhite,
                borderRadius: BorderRadius.all(Radius.circular(42)),
              ),
              child: Column(
                children: [
                  Align(
                    alignment: Alignment.centerRight,
                    child: Padding(
                      padding: const EdgeInsets.only(top: 20, right: 20),
                      child: GestureDetector(
                        onTap: () {
                          ref
                              .read(app.model)
                              .triggerEvent(app.Event.cancelPressed);
                        },
                        child: const Icon(
                          Icons.cancel,
                          color: colorDark,
                        ),
                      ),
                    ),
                  ),
                  Text(
                    pairingBoxText,
                    style: const TextStyle(
                      fontFamily: 'SF Pro Display',
                      color: colorDark,
                      fontSize: 24,
                      fontWeight: FontWeight.w600,
                    ),
                  ), //
                  Expanded(
                    child: pairingBoxImage,
                  ),
                  GestureDetector(
                    onTap: () {
                      ref.read(app.model).triggerEvent(app.Event.buttonPressed);
                    },
                    child: Container(
                      decoration: BoxDecoration(
                        color: pairingBoxButtonEnabled ? colorDark : colorLight,
                        borderRadius:
                            const BorderRadius.all(Radius.circular(20)),
                      ),
                      height: 50,
                      margin: const EdgeInsets.only(
                          left: 31, right: 31, bottom: 28),
                      child: Center(
                        child: Text(
                          pairingBoxButtonText,
                          style: textStyleWhiteWidget,
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }
}

</DOCUMENT>
<DOCUMENT filename="pages\regulatory.dart">
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter/material.dart';
import 'package:noa/style.dart';
import 'package:noa/widgets/top_title_bar.dart';

Widget _regulationEntry(String country, Widget body) {
  return Padding(
    padding: const EdgeInsets.only(top: 16),
    child: Row(
      mainAxisAlignment: MainAxisAlignment.spaceAround,
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Expanded(
          child: Text(country, style: textStyleDark),
        ),
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [body],
          ),
        ),
      ],
    ),
  );
}

class RegulatoryPage extends ConsumerWidget {
  const RegulatoryPage({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return Scaffold(
        backgroundColor: colorWhite,
        appBar: topTitleBar(context, 'REGULATORY', false, true),
        body: Padding(
          padding: const EdgeInsets.only(left: 42, right: 42),
          child: SingleChildScrollView(
            child: Column(
              children: [
                Column(
                  children: [
                    const Row(
                      mainAxisAlignment: MainAxisAlignment.spaceAround,
                      children: [
                        Expanded(
                          child:
                              Text("Country", style: textStyleLightSubHeading),
                        ),
                        Expanded(
                          child: Text("Label", style: textStyleLightSubHeading),
                        ),
                      ],
                    ),
                    _regulationEntry(
                      "United States",
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          const Padding(
                              padding: EdgeInsets.only(bottom: 8),
                              child: Text("FCC ID: 2BFWB-F1",
                                  style: textStyleDark)),
                          Padding(
                            padding: const EdgeInsets.only(bottom: 8),
                            child: Image.asset('assets/images/fcc_icon.png'),
                          ),
                          const Padding(
                            padding: EdgeInsets.only(bottom: 8),
                            child: Text(
                              "This device complies with Part 15 of the FCC Rules. Operation is subject to the following two conditions: (1) This device may not cause harmful interference, and (2) This device must accept any interference received, including interference that may cause undesired operation.",
                              style: textStyleDark,
                            ),
                          ),
                        ],
                      ),
                    ),
                    _regulationEntry(
                      "Europe / \nUnited Kingdom",
                      Image.asset('assets/images/eu_reg_icons.png'),
                    ),
                    _regulationEntry(
                      "Japan",
                      Image.asset('assets/images/telec_icon.png'),
                    ),
                  ],
                ),
                const Padding(
                  padding: EdgeInsets.only(top: 40, bottom: 8),
                  child: Text(
                    "Brilliant Labs Pte Ltd\n68 Circular Road #02-01\n049422 Singapore",
                    style: textStyleDark,
                    textAlign: TextAlign.center,
                  ),
                ),
                const Padding(
                    padding: EdgeInsets.only(bottom: 40),
                    child: Text(
                      "Frame is made in Singapore",
                      style: textStyleDark,
                    )),
              ],
            ),
          ),
        ));
  }
}

</DOCUMENT>
<DOCUMENT filename="pages\splash.dart">
import 'dart:async';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter/material.dart';
import 'package:noa/models/app_logic_model.dart' as app;
import 'package:noa/pages/login.dart';
import 'package:noa/pages/noa.dart';
import 'package:noa/style.dart';
import 'package:noa/util/switch_page.dart';

class SplashPage extends ConsumerWidget {
  const SplashPage({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      ref.read(app.model).triggerEvent(app.Event.init);
      Timer(const Duration(milliseconds: 1500), () {
        switch (ref.watch(app.model).state.current) {
          case app.State.connected:
          case app.State.disconnected:
            switchPage(context, const NoaPage());
            break;
          default:
            switchPage(context, const LoginPage());
        }
      });
    });

    return Scaffold(
      backgroundColor: colorWhite,
      body: Center(
        child: Image.asset('assets/images/brilliant_logo_black.png'),
      ),
    );
  }
}

</DOCUMENT>
<DOCUMENT filename="pages\tune.dart">
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter/material.dart';
import 'package:noa/models/app_logic_model.dart' as app;
import 'package:noa/style.dart';
import 'package:noa/widgets/bottom_nav_bar.dart';
import 'package:noa/widgets/top_title_bar.dart';

Widget _textBox(WidgetRef ref, int index) {
  late String title;
  late String value;
  late bool isCustomServerEnabled = ref.watch(app.model.select((v) => v.customServer));
  late bool willShow = true;
  switch (index) {
    case 0:
      willShow = !isCustomServerEnabled;
      title = "System prompt";
      value = ref.watch(app.model.select((v) => v.tunePrompt)); 
      break;
  }
  if (!willShow) {
    return Container();
  }
  return Padding(
    padding: const EdgeInsets.only(bottom: 21),
    child: Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Padding(
          padding: const EdgeInsets.only(bottom: 10),
          child: Text(title, style: textStyleLightSubHeading),
        ),
        Container(
          decoration: const BoxDecoration(
            color: colorLight,
            borderRadius: BorderRadius.all(Radius.circular(10)),
          ),
          padding: const EdgeInsets.only(
            top: 5,
            bottom: 7,
            left: 10,
            right: 10,
          ),
          child: TextFormField(
            initialValue: value,
            minLines: 8,
            maxLines: null,
            onTapOutside: (event) => FocusScope.of(ref.context).unfocus(),
            onChanged: (value) {
              switch (index) {
                case 0:
                  ref.read(app.model.select((v) => v.tunePrompt = value));
                  break;
              }
            },
            style: textStyleDark,
            decoration: const InputDecoration.collapsed(
              fillColor: colorLight,
              filled: true,
              hintText: "",
            ),
          ),
        ),
      ],
    ),
  );
}

Widget _inputBox(WidgetRef ref, int index) {
  late String title;
  late String value;
  late bool isCustomServerEnabled = ref.watch(app.model.select((v) => v.customServer));
  late bool willShow = true;

  switch (index) {
    case 0:
      willShow = isCustomServerEnabled;
      title = "API Endpoint";
      value = ref.watch(app.model.select((v) => v.apiEndpoint));
      break;
    case 1:
      willShow = isCustomServerEnabled;
      title = "API Header Value";
      value = ref.watch(app.model.select((v) => v.apiHeader));
      break;
    case 2:
      willShow = isCustomServerEnabled;
      title = "API Header Key";
      value = ref.watch(app.model.select((v) => v.apiToken));
      break;
  }
  if (!willShow) {
    return Container();
  }
  return Padding(
    padding: const EdgeInsets.only(bottom: 21),
    child: Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Padding(
          padding: const EdgeInsets.only(bottom: 10),
          child: Text(title, style: textStyleLightSubHeading),
        ),
        Container(
          decoration: const BoxDecoration(
            color: colorLight,
            borderRadius: BorderRadius.all(Radius.circular(10)),
          ),
          padding: const EdgeInsets.only(
            top: 5,
            bottom: 7,
            left: 10,
            right: 10,
          ),
          child: TextFormField(
            initialValue: value,
            minLines: 1,
            maxLines: null,
            onTapOutside: (event) => FocusScope.of(ref.context).unfocus(),
            onChanged: (value) {
              switch (index) {
                case 0:
                  ref.read(app.model.select((v) => v.apiEndpoint = value));
                  break;
                case 1:
                  ref.read(app.model.select((v) => v.apiHeader = value));
                  break;
                case 2:
                  ref.read(app.model.select((v) => v.apiToken = value));
                  break;
              }
            },
            style: textStyleDark,
            decoration: const InputDecoration.collapsed(
              fillColor: colorLight,
              filled: true,
              hintText: "",
            ),
          ),
        ),
      ],
    ),
  );
}

Widget _slider(WidgetRef ref, int index) {
  late String title;
  late int divisions;
  late int value;
  late String label;
  late bool isCustomServerEnabled = ref.watch(app.model.select((v) => v.customServer));
  late bool willShow = true;
  switch (index) {
    case 0:
      willShow = !isCustomServerEnabled;
      title = "Temperature";
      divisions = 100;
      value = ref.watch(app.model.select((v) => v.tuneTemperature));
      label = value.toString();
      break;
    case 1:
      willShow = !isCustomServerEnabled;
      title = "Response length";
      divisions = 4;
      value = ref.watch(app.model.select((v) => v.tuneLength.index));
      label = ref.watch(app.model.select((v) => v.tuneLength.name));
      break;
  }
  if (!willShow) {
    return Container();
  }
  return Padding(
    padding: const EdgeInsets.only(bottom: 10),
    child: Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Padding(
          padding: const EdgeInsets.only(bottom: 0),
          child: Text(title, style: textStyleLightSubHeading),
        ),
        SliderTheme(
          data: const SliderThemeData(
            trackHeight: 5,
            activeTrackColor: colorLight,
            activeTickMarkColor: colorLight,
            inactiveTrackColor: colorLight,
            inactiveTickMarkColor: colorLight,
            thumbColor: colorLight,
            valueIndicatorColor: colorDark,
            trackShape: RectangularSliderTrackShape(),
          ),
          child: Slider(
            label: label,
            value: value.toDouble(),
            divisions: divisions,
            min: 0,
            max: divisions.toDouble(),
            onChanged: (double value) {
              switch (index) {
                case 0:
                  ref.read(app.model
                      .select((v) => v.tuneTemperature = value.toInt()));
                  break;
                case 1:
                  late app.TuneLength enumValue;
                  switch (value.toInt()) {
                    case 0:
                      enumValue = app.TuneLength.shortest;
                      break;
                    case 1:
                      enumValue = app.TuneLength.short;
                      break;
                    case 2:
                      enumValue = app.TuneLength.standard;
                      break;
                    case 3:
                      enumValue = app.TuneLength.long;
                      break;
                    case 4:
                      enumValue = app.TuneLength.longest;
                      break;
                  }
                  ref.read(app.model.select((v) => v.tuneLength = enumValue));
                  break;
              }
            },
          ),
        ),
      ],
    ),
  );
}

Widget _checkBox(WidgetRef ref, int index) {
  late String title;
  late bool value;
  late String disableOption = "Disabled";
  late String enableOption = "Enabled";
  late bool isCustomServerEnabled = ref.watch(app.model.select((v) => v.customServer));
  late bool willShow = true;

  switch (index) {
    case 0:
      willShow = !isCustomServerEnabled;
      title = "Text to speech";
      value = ref.watch(app.model.select((v) => v.textToSpeech));
      disableOption = "Disabled";
      enableOption = "Enabled";
    case 1:
      willShow = !isCustomServerEnabled;
      title = "Promptless";
      value = ref.watch(app.model.select((v) => v.promptless));
    case 2:
      title = "Server";
      value = ref.watch(app.model.select((v) => v.customServer));
      disableOption = "Noa Server";
      enableOption = "Custom Server";
  }
  if (!willShow) {
    return Container();
  }

  return Padding(
    padding: const EdgeInsets.only(bottom: 10),
    child: Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Padding(
          padding: const EdgeInsets.only(bottom: 8.0),
          child: Text(title, style: textStyleLightSubHeading),
        ),
        Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
             Padding(
              padding: const EdgeInsets.only(right: 8),
              child: Text(disableOption, style: textStyleDark),
            ),
            Switch(
              value: value,
              activeColor: colorDark,
              inactiveTrackColor: colorWhite,
              inactiveThumbColor: colorLight,
              onChanged: (value) {
                switch (index) {
                  case 0:
                    ref.read(app.model.select((v) => v.textToSpeech = value));
                    break;
                  case 1:
                    ref.read(app.model.select((v) => v.promptless = value));
                    break;
                  case 2:
                    ref.read(app.model.select((v) => v.customServer = value));
                    break;
                }
              },
            ),
            Padding(
              padding: const EdgeInsets.only(right: 8, left: 8),
              child: Text(enableOption, style: textStyleDark),
            ),
          ],
        ),
      ],
    ),
  );
}

class TunePage extends ConsumerWidget {
  const TunePage({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return Scaffold(
      backgroundColor: colorWhite,
      appBar: topTitleBar(context, 'HACK', false, false),
      body: Padding(
        padding: const EdgeInsets.only(left: 42, right: 42),
        child: SingleChildScrollView(
          child: Column(
            children: [
              _checkBox(ref, 2),
              _textBox(ref, 0),
              _slider(ref, 0),
              _slider(ref, 1),
              _checkBox(ref, 0),
              _inputBox(ref, 0),
              _inputBox(ref, 2),
              _inputBox(ref, 1),
              _checkBox(ref, 1),
            ],
          ),
        ),
      ),
      bottomNavigationBar: bottomNavBar(context, 1, false),
    );
  }
}
</DOCUMENT>
<DOCUMENT filename="util\alert_dialog.dart">
// This shows a CupertinoModalPopup which hosts a CupertinoAlertDialog.
import 'package:flutter/cupertino.dart';

void alertDialog(BuildContext context, String alertTitle, String alertString) {
  showCupertinoDialog(
    context: context,
    builder: (BuildContext context) => CupertinoAlertDialog(
      title: Text(alertTitle),
      content: Text(alertString),
      actions: <CupertinoDialogAction>[
        CupertinoDialogAction(
          /// This parameter indicates this action is the default,
          /// and turns the action's text to bold text.
          isDefaultAction: true,
          onPressed: () {
            Navigator.pop(context);
          },
          child: const Text('Okay'),
        ),
      ],
    ),
  );
}

</DOCUMENT>
<DOCUMENT filename="util\app_log.dart">
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter/foundation.dart';
import 'package:logging/logging.dart';

class AppLog extends ChangeNotifier {
  String app = "";
  String bluetooth = "";

  AppLog() {
    Logger.root.level = Level.INFO;
    Logger.root.onRecord.listen((log) {
      if (kDebugMode) {
        print('${log.level.name} - ${log.loggerName}: ${log.message}');
      }
      if (log.loggerName == "Bluetooth") {
        bluetooth += "${log.level.name} - ${log.message}\n";
      } else {
        app += "${log.level.name} - ${log.loggerName}: ${log.message}\n";
      }
      // TODO limit the size of this string
      notifyListeners();
    });
  }
}

final appLog = ChangeNotifierProvider<AppLog>((ref) => AppLog());

</DOCUMENT>
<DOCUMENT filename="util\bytes_to_wav.dart">
import 'dart:convert';
import 'dart:io';
import 'dart:typed_data';
import 'package:logging/logging.dart';

final _log = Logger("Bytes to wav");

Uint8List _uint32to8(int value) =>
    Uint8List(4)..buffer.asUint32List()[0] = value;

Uint8List _uint16to8(int value) =>
    Uint8List(2)..buffer.asUint16List()[0] = value;

Uint8List offsetPcm(Uint8List inData) {
  List<int> outData = [];
  for (var element in inData) {
    outData.add((element + 128) % 256);
  }
  var outDataUint8 = Uint8List.fromList(outData);
  return outDataUint8.buffer.asUint8List();
}

Uint8List bytesToWav(Uint8List pcmBytes, int bitDepth, int sampleRate) {
  final output = BytesBuilder();
  try {
    output.add(utf8.encode('RIFF'));
    output.add(_uint32to8(36 + pcmBytes.length));
    output.add(utf8.encode('WAVE'));
    output.add(utf8.encode('fmt '));
    output.add(_uint32to8(16));
    output.add(_uint16to8(1));
    output.add(_uint16to8(1));
    output.add(_uint32to8(sampleRate));
    output.add(_uint32to8((sampleRate * bitDepth) ~/ 8));
    output.add(_uint16to8(bitDepth ~/ 8));
    output.add(_uint16to8(bitDepth));
    output.add(utf8.encode('data'));
    output.add(_uint32to8(pcmBytes.length));
    output.add(offsetPcm(pcmBytes.buffer.asUint8List()));
  } catch (error) {
    _log.warning("Could not build audio file: $error");
  }
  return output.toBytes();
}

</DOCUMENT>
<DOCUMENT filename="util\foreground_service.dart">
import 'dart:isolate';
import 'package:flutter_foreground_task/flutter_foreground_task.dart';
import 'package:logging/logging.dart';

final _log = Logger("Foreground task");

void initializeForegroundService() {
  FlutterForegroundTask.init(
    androidNotificationOptions: AndroidNotificationOptions(
      channelId: 'foreground_service',
      channelName: 'Noa Service',
      channelImportance: NotificationChannelImportance.MIN,
      iconData: null,
    ),
    iosNotificationOptions: const IOSNotificationOptions(
      showNotification: false,
      playSound: false,
    ),
    foregroundTaskOptions: const ForegroundTaskOptions(
      isOnceEvent: true,
    ),
  );
}

void startForegroundService() async {
  if (await FlutterForegroundTask.isRunningService) {
    FlutterForegroundTask.restartService();
  } else {
    FlutterForegroundTask.startService(
      notificationTitle: 'Noa is standing by',
      notificationText: 'Tap to return to the app',
      callback: _startForegroundCallback,
    );
  }
}

@pragma('vm:entry-point')
void _startForegroundCallback() {
  FlutterForegroundTask.setTaskHandler(_ForegroundFirstTaskHandler());
}

class _ForegroundFirstTaskHandler extends TaskHandler {
  @override
  void onStart(DateTime timestamp, SendPort? sendPort) async {
    _log.info("Starting foreground task");
  }

  @override
  void onRepeatEvent(DateTime timestamp, SendPort? sendPort) async {
    _log.info("Foreground repeat event triggered");
  }

  @override
  void onDestroy(DateTime timestamp, SendPort? sendPort) async {
    _log.info("Destroying foreground task");
    FlutterForegroundTask.stopService();
  }
}

</DOCUMENT>
<DOCUMENT filename="util\location.dart">
import 'dart:async';
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:geocoding/geocoding.dart' as geocoding;
import 'package:geolocator/geolocator.dart';
import 'package:logging/logging.dart';

final _log = Logger("Location");

Position? _position;

class Location {
  static Future<void> requestPermission(BuildContext context) async {
    LocationPermission permission = await Geolocator.checkPermission();

    if (permission == LocationPermission.denied) {
      _log.info("Requesting location permission from user");

      if (Platform.isAndroid) {
        Completer completer = Completer();
        if (context.mounted) {
          showDialog(
            context: context,
            builder: (BuildContext context) => AlertDialog(
              title: const Text("Allow location?"),
              content: const Text(
                  "Noa can give responses and recommendations based on your current location even when the app is in the background. This is optional and can be turned off at anytime from your system settings"),
              actions: <Widget>[
                TextButton(
                  onPressed: () {
                    Navigator.pop(context);
                    completer.complete();
                  },
                  child: const Text('Okay'),
                )
              ],
            ),
          );
        }
        await completer.future;
      }

      await Geolocator.requestPermission();
      permission = await Geolocator.checkPermission();
      if (permission == LocationPermission.denied ||
          permission == LocationPermission.deniedForever) {
        _log.info("Permission rejected by user. Won't use location");
        return;
      }
    }

    startLocationStream();
  }

static void startLocationStream() async {
    late LocationSettings locationSettings;
    LocationPermission permission = await Geolocator.checkPermission();

    if (permission == LocationPermission.denied ||
        permission == LocationPermission.deniedForever) {
      _log.info("location permission not present. Won't use location");
      return;
    }

    if (Platform.isIOS) {
      locationSettings = AppleSettings(
          accuracy: LocationAccuracy.low,
          pauseLocationUpdatesAutomatically: true);
    }

    if (Platform.isAndroid) {
      locationSettings = AndroidSettings(
          accuracy: LocationAccuracy.low,
          intervalDuration: const Duration(minutes: 5));
    }

    Geolocator.getPositionStream(locationSettings: locationSettings)
        .listen((Position? position) {
      _log.fine("Location updated. Accuracy: ${position!.accuracy}");
      _position = position;
    });
  }

  static Future<String> getAddress() async {
    String appendComma(String string) {
      if (string != "") {
        string += ", ";
      }
      return string;
    }

    try {
      if (_position == null) {
        return "";
      }

      _log.info(
          "Using co-ordinates: Latitude: ${_position!.latitude}, longitude: ${_position!.longitude}");

      geocoding.Placemark placemark = (await geocoding.placemarkFromCoordinates(
        _position!.latitude,
        _position!.longitude,
      ))
          .first;

      String returnString = "";

      if (placemark.name != null) {
        returnString += placemark.name!;
      }

      if (placemark.street != null && placemark.street != placemark.name) {
        returnString = appendComma(returnString);
        returnString += placemark.street!;
      }

      if (placemark.subLocality != null) {
        returnString = appendComma(returnString);
        returnString += placemark.subLocality!;
      }

      if (placemark.locality != null) {
        returnString = appendComma(returnString);
        returnString += placemark.locality!;
      }

      if (placemark.postalCode != null) {
        returnString = appendComma(returnString);
        returnString += placemark.postalCode!;
      }

      if (placemark.country != null) {
        returnString = appendComma(returnString);
        returnString += placemark.country!;
      }

      return returnString;
    } catch (error) {
      _log.warning("Could not get location: $error");
      return Future.error(error);
    }
  }
}

</DOCUMENT>
<DOCUMENT filename="util\show_toast.dart">
import 'package:flutter/material.dart';

void showToast(String message, BuildContext context) {
  final scaffold = ScaffoldMessenger.of(context);
  scaffold.showSnackBar(
    SnackBar(
      behavior: SnackBarBehavior.floating,
      duration: const Duration(milliseconds: 1500),
      margin: const EdgeInsets.only(left: 42, right: 42, bottom: 20),
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.all(Radius.circular(10)),
      ),
      padding: const EdgeInsets.all(7),
      content: Center(child: Text(message)),
    ),
  );
}

</DOCUMENT>
<DOCUMENT filename="util\sign_in.dart">
import 'dart:io';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:flutter/foundation.dart';
import 'package:google_sign_in/google_sign_in.dart';
import 'package:logging/logging.dart';
import 'package:noa/noa_api.dart';
import 'package:sign_in_with_apple/sign_in_with_apple.dart';

final _log = Logger("Sign in");

class SignIn {
  Future<String> withApple() async {
    try {
      _log.info("Signing in using Apple");

      final credential = await SignInWithApple.getAppleIDCredential(
        scopes: [
          AppleIDAuthorizationScopes.email,
        ],
        webAuthenticationOptions: WebAuthenticationOptions(
          clientId: 'xyz.brilliant.noaflutter',
          redirectUri: Uri.parse('https://api.brilliant.xyz/noa/login/apple'),
        ),
      );

      return await NoaApi.signIn(
        credential.authorizationCode,
        NoaApiAuthProvider.apple,
      );
    } catch (error) {
      _log.warning("Could not sign in: $error");
      return Future.error(error);
    }
  }

  Future<String> withGoogle() async {
    try {
      _log.info("Signing in using Google");

      GoogleSignInAccount? account;

      if (Platform.isAndroid) {
        account = await GoogleSignIn(
          serverClientId: kReleaseMode
              ? dotenv.env['GOOGLE_ANDROID_CLIENT_ID']
              : dotenv.env['GOOGLE_ANDROID_DEBUG_CLIENT_ID'],
          scopes: ['email'],
        ).signIn();
      }

      if (Platform.isIOS) {
        account = await GoogleSignIn(
          clientId: dotenv.env['GOOGLE_IOS_CLIENT_ID'],
          scopes: ['email'],
        ).signIn();
      }

      final GoogleSignInAuthentication auth = await account!.authentication;

      return await NoaApi.signIn(
        auth.idToken ?? "",
        NoaApiAuthProvider.google,
      );
    } catch (error) {
      _log.warning("Could not sign in: $error");
      return Future.error(error);
    }
  }

  withDiscord() async {}
}

</DOCUMENT>
<DOCUMENT filename="util\state_machine.dart">
import 'package:logging/logging.dart';

final _log = Logger("State machine");

class StateMachine {
  dynamic current;
  dynamic _next;
  dynamic _event;
  bool _onEntryHandled = false;

  StateMachine(initialState) {
    current = initialState;
    _next = initialState;
  }

  void event(event) {
    _event = event;
  }

  void changeOn(event, next, {Function? transitionTask}) {
    if (event == _event) {
      _event = null;
      _next = next;
      _onEntryHandled = false;

      if (transitionTask != null) {
        _log.fine("Executing transitionTask");
        transitionTask();
      }

      _log.info("$event triggered change $current â†’ $next");
    }
  }

  bool changePending() {
    if (_next == current) {
      return false;
    }

    current = _next;
    return true;
  }

  void onEntry(Function task) {
    if (_onEntryHandled == false) {
      _log.fine("Executing onEntry task");
      task();
      _onEntryHandled = true;
    }
  }
}

</DOCUMENT>
<DOCUMENT filename="util\switch_page.dart">
import 'package:flutter/material.dart';

void switchPage(BuildContext context, Widget to) {
  Navigator.pushReplacement(
    context,
    PageRouteBuilder(
      pageBuilder: (context, animation1, animation2) => to,
      transitionDuration: Duration.zero,
      reverseTransitionDuration: Duration.zero,
    ),
  );
}

</DOCUMENT>
<DOCUMENT filename="widgets\bottom_nav_bar.dart">
import 'package:flutter/material.dart';
import 'package:noa/style.dart';
import 'package:noa/pages/noa.dart';
import 'package:noa/pages/tune.dart';
import 'package:noa/pages/hack.dart';
import 'package:noa/util/switch_page.dart';

Color getButtonColor(bool selected, bool darkMode) {
  return selected
      ? (darkMode ? colorWhite : colorDark)
      : (darkMode ? colorLight : colorLight);
}

Widget bottomNavBar(BuildContext context, int selected, bool darkMode) {
  return Container(
    height: 50,
    margin: const EdgeInsets.only(left: 42, right: 42, bottom: 50),
    decoration: BoxDecoration(
      color: darkMode ? colorLight : colorLight,
      borderRadius: const BorderRadius.all(Radius.circular(20)),
    ),
    child: Row(
      children: [
        Expanded(
          child: GestureDetector(
            onTap: () {
              switchPage(context, const NoaPage());
            },
            onHorizontalDragUpdate: (details) {
              if (selected == 0 && details.delta.dx > 8) {
                switchPage(context, const TunePage());
              }
            },
            child: Container(
              decoration: BoxDecoration(
                color: getButtonColor(selected == 0, darkMode),
                borderRadius: const BorderRadius.all(Radius.circular(20)),
              ),
              child: Center(
                child: Text(
                  "CHAT",
                  style: darkMode ? textStyleDarkWidget : textStyleWhiteWidget,
                ),
              ),
            ),
          ),
        ),
        Expanded(
          child: GestureDetector(
            onTap: () {
              switchPage(context, const TunePage());
            },
            onHorizontalDragUpdate: (details) {
              if (selected == 1 && details.delta.dx > 8) {
                switchPage(context, const HackPage());
              } else if (selected == 1 && details.delta.dx < -8) {
                switchPage(context, const NoaPage());
              }
            },
            child: Container(
              decoration: BoxDecoration(
                color: getButtonColor(selected == 1, darkMode),
                borderRadius: const BorderRadius.all(Radius.circular(20)),
              ),
              child: Center(
                child: Text(
                  "HACK",
                  style: darkMode ? textStyleDarkWidget : textStyleWhiteWidget,
                ),
              ),
            ),
          ),
        ),
        Expanded(
          child: GestureDetector(
            onTap: () {
              switchPage(context, const HackPage());
            },
            onHorizontalDragUpdate: (details) {
              if (selected == 2 && details.delta.dx < -8) {
                switchPage(context, const TunePage());
              }
            },
            child: Container(
              decoration: BoxDecoration(
                color: getButtonColor(selected == 2, darkMode),
                borderRadius: const BorderRadius.all(Radius.circular(20)),
              ),
              child: Center(
                child: Text(
                  "LOG",
                  style: darkMode ? textStyleDarkWidget : textStyleWhiteWidget,
                ),
              ),
            ),
          ),
        ),
      ],
    ),
  );
}
</DOCUMENT>
<DOCUMENT filename="widgets\top_title_bar.dart">
import 'package:flutter/material.dart';
import 'package:noa/pages/account.dart';
import 'package:noa/style.dart';

AppBar topTitleBar(
    BuildContext context, String title, bool darkMode, bool accountPage) {
  return AppBar(
    toolbarHeight: 84,
    automaticallyImplyLeading: false,
    backgroundColor: darkMode ? colorDark : colorWhite,
    scrolledUnderElevation: 0,
    title: Text(
      title,
      style: darkMode ? textStyleWhiteTitle : textStyleDarkTitle,
    ),
    centerTitle: false,
    titleSpacing: 42,
    actions: [
      Container(
          width: 28,
          height: 28,
          margin: const EdgeInsets.only(right: 42),
          child: GestureDetector(
            onTap: () {
              if (accountPage) {
                Navigator.pop(context);
              } else {
                Navigator.push(
                  context,
                  PageRouteBuilder(
                    pageBuilder: (context, animation1, animation2) =>
                        const AccountPage(),
                    transitionDuration: Duration.zero,
                    reverseTransitionDuration: Duration.zero,
                  ),
                );
              }
            },
            child: Icon(accountPage ? Icons.cancel : Icons.person,
                color: darkMode ? colorWhite : colorDark),
          ))
    ],
  );
}

</DOCUMENT>
<DOCUMENT filename="bluetooth.dart">
import 'dart:async';
import 'dart:convert';
import 'dart:io';
import 'dart:math';
import 'dart:typed_data';
import 'package:archive/archive_io.dart';
import 'package:flutter_blue_plus/flutter_blue_plus.dart';
import 'package:flutter/services.dart';
import 'package:logging/logging.dart';

final _log = Logger("Bluetooth");

class BrilliantBluetoothException implements Exception {
  final String msg;
  const BrilliantBluetoothException(this.msg);
  @override
  String toString() => 'BrilliantBluetoothException: $msg';
}

enum BrilliantConnectionState {
  connected,
  dfuConnected,
  disconnected,
}

class BrilliantScannedDevice {
  BluetoothDevice device;
  int? rssi;

  BrilliantScannedDevice({
    required this.device,
    required this.rssi,
  });
}

class BrilliantDevice {
  BluetoothDevice device;
  BrilliantConnectionState state;
  int? maxStringLength;
  int? maxDataLength;

  BluetoothCharacteristic? _txChannel;
  BluetoothCharacteristic? _rxChannel;
  BluetoothCharacteristic? _dfuControl;
  BluetoothCharacteristic? _dfuPacket;

  BrilliantDevice({
    required this.state,
    required this.device,
    this.maxStringLength,
    this.maxDataLength,
  });

  Stream<BrilliantDevice> get connectionState {
    return FlutterBluePlus.events.onConnectionStateChanged
        .where((event) =>
            event.connectionState == BluetoothConnectionState.connected ||
            (event.connectionState == BluetoothConnectionState.disconnected &&
                event.device.disconnectReason != null &&
                event.device.disconnectReason!.code != 23789258))
        .asyncMap((event) async {
      if (event.connectionState == BluetoothConnectionState.connected) {
        _log.info("Connection state stream: Connected");
        try {
          return await BrilliantBluetooth._enableServices(event.device);
        } catch (error) {
          _log.warning("Connection state stream: Invalid due to $error");
          return Future.error(BrilliantBluetoothException(error.toString()));
        }
      }
      _log.info(
          "Connection state stream: Disconnected due to ${event.device.disconnectReason!.description}");
      if (Platform.isAndroid) {
        event.device.connect(timeout: const Duration(days: 365));
      }
      return BrilliantDevice(
        state: BrilliantConnectionState.disconnected,
        device: event.device,
      );
    });
  }

  Stream<String> get stringResponse {
    return FlutterBluePlus.events.onCharacteristicReceived
        .where((event) => event.value[0] != 0x01)
        .map((event) {
      if (event.value[0] != 0x02) {
        _log.info("Received string: ${utf8.decode(event.value)}");
      }
      return utf8.decode(event.value);
    });
  }

  Stream<List<int>> get dataResponse {
    return FlutterBluePlus.events.onCharacteristicReceived
        .where((event) => event.value[0] == 0x01)
        .map((event) {
      _log.fine("Received data: ${event.value.sublist(1)}");
      return event.value.sublist(1);
    });
  }

  Future<void> disconnect() async {
    _log.info("Disconnecting");
    try {
      await device.disconnect();
    } catch (_) {}
  }

  Future<void> sendBreakSignal() async {
    _log.info("Sending break signal");
    await sendString("\x03", awaitResponse: false, log: false);
    await Future.delayed(const Duration(milliseconds: 100));
  }

  Future<void> sendResetSignal() async {
    _log.info("Sending reset signal");
    await sendString("\x04", awaitResponse: false, log: false);
    await Future.delayed(const Duration(milliseconds: 100));
  }

  Future<String?> sendString(
    String string, {
    bool awaitResponse = true,
    bool log = true,
  }) async {
    try {
      if (log) {
        _log.info("Sending string: $string");
      }

      if (state != BrilliantConnectionState.connected) {
        throw ("Device is not connected");
      }

      if (string.length > maxStringLength!) {
        throw ("Payload exceeds allowed length of $maxStringLength");
      }

      await _txChannel!.write(utf8.encode(string), withoutResponse: true);

      if (awaitResponse == false) {
        return null;
      }

      final response = await _rxChannel!.onValueReceived
          .timeout(const Duration(seconds: 1))
          .first;

      return utf8.decode(response);
    } catch (error) {
      _log.warning("Couldn't send string. $error");
      return Future.error(BrilliantBluetoothException(error.toString()));
    }
  }

  Future<void> sendData(List<int> data) async {
    try {
      _log.info("Sending ${data.length} bytes of plain data");
      _log.fine(data);

      if (state != BrilliantConnectionState.connected) {
        throw ("Device is not connected");
      }

      if (data.length > maxDataLength!) {
        throw ("Payload exceeds allowed length of $maxDataLength");
      }

      var finalData = data.toList()..insert(0, 0x01);

      await _txChannel!.write(finalData, withoutResponse: true);
    } catch (error) {
      _log.warning("Couldn't send data. $error");
      return Future.error(BrilliantBluetoothException(error.toString()));
    }
  }

  Future<void> uploadScript(String fileName, String filePath) async {
    try {
      _log.info("Uploading script: $fileName");

      String file = await rootBundle.loadString(filePath);

      file = file.replaceAll('\\', '\\\\');
      file = file.replaceAll("\r\n", "\\n");
      file = file.replaceAll("\n", "\\n");
      file = file.replaceAll("'", "\\'");
      file = file.replaceAll('"', '\\"');

      var resp = await sendString(
          "f=frame.file.open('$fileName', 'w');print('\x02')",
          log: false);

      if (resp != "\x02") {
        throw ("Error opening file: $resp");
      }

      int index = 0;
      int chunkSize = maxStringLength! - 22;

      while (index < file.length) {
        // Don't go over the end of the string
        if (index + chunkSize > file.length) {
          chunkSize = file.length - index;
        }

        // Don't split on an escape character
        while (file[index + chunkSize - 1] == '\\') {
          chunkSize -= 1;
        }

        String chunk = file.substring(index, index + chunkSize);

        resp = await sendString("f:write('$chunk');print('\x02')", log: false);

        if (resp != "\x02") {
          throw ("Error writing file: $resp");
        }

        index += chunkSize;
      }

      resp = await sendString("f:close();print('\x02')", log: false);

      if (resp != "\x02") {
        throw ("Error closing file: $resp");
      }
    } catch (error) {
      _log.warning("Couldn't upload script. $error");
      return Future.error(BrilliantBluetoothException(error.toString()));
    }
  }

  Stream<double> updateFirmware(String filePath) async* {
    try {
      yield 0;

      _log.info("Starting firmware update");

      if (state != BrilliantConnectionState.dfuConnected) {
        throw ("DFU device is not connected");
      }

      if (_dfuControl == null || _dfuPacket == null) {
        throw ("Device is not in DFU mode");
      }

      final updateZipFile = await rootBundle.load(filePath);
      final zip = ZipDecoder().decodeBytes(updateZipFile.buffer.asUint8List());

      final initFile = zip.firstWhere((file) => file.name.endsWith(".dat"));
      final imageFile = zip.firstWhere((file) => file.name.endsWith(".bin"));

      await for (var _ in _transferDfuFile(initFile.content, true)) {}
      await Future.delayed(const Duration(milliseconds: 500));
      await for (var value in _transferDfuFile(imageFile.content, false)) {
        yield value;
      }

      _log.info("Firmware update completed");
    } catch (error) {
      _log.warning("Couldn't complete firmware update. $error");
      yield* Stream.error(BrilliantBluetoothException(error.toString()));
    }
  }

  Stream<double> _transferDfuFile(Uint8List file, bool isInitFile) async* {
    Uint8List response;

    try {
      if (isInitFile) {
        _log.fine("Uploading DFU init file. Size: ${file.length}");
        response = await _dfuSendControlData(Uint8List.fromList([0x06, 0x01]));
      } else {
        _log.fine("Uploading DFU image file. Size: ${file.length}");
        response = await _dfuSendControlData(Uint8List.fromList([0x06, 0x02]));
      }
    } catch (_) {
      throw ("Couldn't create DFU file on device");
    }

    final maxSize = ByteData.view(response.buffer).getUint32(3, Endian.little);
    var offset = ByteData.view(response.buffer).getUint32(7, Endian.little);
    final crc = ByteData.view(response.buffer).getUint32(11, Endian.little);

    _log.fine("Received allowed size: $maxSize, offset: $offset, CRC: $crc");

    while (offset < file.length) {
      final chunkSize = min(maxSize, file.length - offset);
      final chunkCrc = getCrc32(file.sublist(0, offset + chunkSize));

      // Create command with size
      final chunkSizeAsBytes = [
        chunkSize & 0xFF,
        chunkSize >> 8 & 0xFF,
        chunkSize >> 16 & 0xff,
        chunkSize >> 24 & 0xff
      ];

      try {
        if (isInitFile) {
          await _dfuSendControlData(
              Uint8List.fromList([0x01, 0x01, ...chunkSizeAsBytes]));
        } else {
          await _dfuSendControlData(
              Uint8List.fromList([0x01, 0x02, ...chunkSizeAsBytes]));
        }
      } catch (_) {
        throw ("Couldn't issue DFU create command");
      }

      // Split chunk into packets of MTU size
      final packetSize = device.mtuNow - 3;
      final packets = (chunkSize / packetSize).ceil();

      for (var p = 0; p < packets; p++) {
        final fileStart = offset + p * packetSize;
        var fileEnd = fileStart + packetSize;

        // The last packet could be smaller
        if (fileEnd - offset > maxSize) {
          fileEnd -= fileEnd - offset - maxSize;
        }

        // The last part of the file could also be smaller
        if (fileEnd > file.length) {
          fileEnd = file.length;
        }

        final fileSlice = file.sublist(fileStart, fileEnd);

        final percentDone = (100 / file.length) * offset;
        yield percentDone;

        _log.fine(
            "Sending ${fileSlice.length} bytes of packet data. ${percentDone.toInt()}% Complete");

        await _dfuSendPacketData(fileSlice)
            .onError((_, __) => throw ("Couldn't send DFU data"));
      }

      // Calculate CRC
      try {
        response = await _dfuSendControlData(Uint8List.fromList([0x03]));
      } catch (_) {
        throw ("Couldn't get CRC from device");
      }
      offset = ByteData.view(response.buffer).getUint32(3, Endian.little);
      final returnedCrc =
          ByteData.view(response.buffer).getUint32(7, Endian.little);

      if (returnedCrc != chunkCrc) {
        throw ("CRC mismatch after sending this chunk");
      }

      // Execute command (The last command may disconnect which is normal)
      try {
        response = await _dfuSendControlData(Uint8List.fromList([0x04]));
      } catch (_) {}
    }

    _log.fine("DFU file sent");
  }

  Future<Uint8List> _dfuSendControlData(Uint8List data) async {
    try {
      _log.fine("Sending ${data.length} bytes of DFU control data: $data");

      _dfuControl!.write(data, timeout: 1);

      final response = await _dfuControl!.onValueReceived
          .timeout(const Duration(seconds: 1))
          .first;

      return Uint8List.fromList(response);
    } catch (error) {
      return Future.error(BrilliantBluetoothException(error.toString()));
    }
  }

  Future<void> _dfuSendPacketData(Uint8List data) async {
    await _dfuPacket!.write(data, withoutResponse: true);
  }
}

class BrilliantBluetooth {
  static Future<void> requestPermission() async {
    try {
      await FlutterBluePlus.startScan();
      await FlutterBluePlus.stopScan();
    } catch (error) {
      _log.warning("Couldn't obtain Bluetooth permission. $error");
      return Future.error(BrilliantBluetoothException(error.toString()));
    }
  }

  static Stream<BrilliantScannedDevice> scan() async* {
    try {
      _log.info("Starting to scan for devices");

      await FlutterBluePlus.startScan(
        withServices: [
          Guid('7a230001-5475-a6a4-654c-8431f6ad49c4'),
          Guid('fe59'),
        ],
        continuousUpdates: true,
        removeIfGone: const Duration(seconds: 2),
      );
    } catch (error) {
      _log.warning("Scanning failed. $error");
      throw BrilliantBluetoothException(error.toString());
    }

    yield* FlutterBluePlus.scanResults
        .where((results) => results.isNotEmpty)
        // TODO filter by name: "Frame", "Frame Update", "Monocle" & "DFUTarg"
        .map((results) {
      ScanResult nearestDevice = results[0];
      for (int i = 0; i < results.length; i++) {
        if (results[i].rssi > nearestDevice.rssi) {
          nearestDevice = results[i];
        }
      }

      _log.fine(
          "Found ${nearestDevice.device.advName} rssi: ${nearestDevice.rssi}");

      return BrilliantScannedDevice(
        device: nearestDevice.device,
        rssi: nearestDevice.rssi,
      );
    });
  }

  static Future<void> stopScan() async {
    try {
      _log.info("Stopping scan for devices");
      await FlutterBluePlus.stopScan();
    } catch (error) {
      _log.warning("Couldn't stop scanning. $error");
      return Future.error(BrilliantBluetoothException(error.toString()));
    }
  }

  static Future<BrilliantDevice> connect(BrilliantScannedDevice scanned) async {
    try {
      _log.info("Connecting");

      await FlutterBluePlus.stopScan();

      await scanned.device.connect(
        autoConnect: Platform.isIOS ? true : false,
        mtu: null,
      );

      final connectionState = await scanned.device.connectionState
          .firstWhere((event) => event == BluetoothConnectionState.connected)
          .timeout(const Duration(seconds: 3));

      if (connectionState == BluetoothConnectionState.connected) {
        return await _enableServices(scanned.device);
      }

      throw ("${scanned.device.disconnectReason?.description}");
    } catch (error) {
      await scanned.device.disconnect();
      _log.warning("Couldn't connect. $error");
      return Future.error(BrilliantBluetoothException(error.toString()));
    }
  }

  static Future<BrilliantDevice> reconnect(String uuid) async {
    try {
      _log.info("Will re-connect to device: $uuid once found");

      BluetoothDevice device = BluetoothDevice.fromId(uuid);

      await device.connect(
        timeout: const Duration(days: 365),
        autoConnect: Platform.isIOS ? true : false,
        mtu: null,
      ); // TODO Should wait but it throws an error on Android after some time

      final connectionState = await device.connectionState.firstWhere((state) =>
          state == BluetoothConnectionState.connected ||
          (state == BluetoothConnectionState.disconnected &&
              device.disconnectReason != null));

      _log.info("Found reconnectable device: $uuid");

      if (connectionState == BluetoothConnectionState.connected) {
        return await _enableServices(device);
      }

      throw ("${device.disconnectReason?.description}");
    } catch (error) {
      _log.warning("Couldn't reconnect. $error");
      return Future.error(BrilliantBluetoothException(error.toString()));
    }
  }

  static Future<BrilliantDevice> _enableServices(BluetoothDevice device) async {
    if (Platform.isAndroid) {
      await device.requestMtu(512);
    }

    BrilliantDevice finalDevice = BrilliantDevice(
      device: device,
      state: BrilliantConnectionState.disconnected,
    );

    List<BluetoothService> services = await device.discoverServices();

    for (var service in services) {
      // If Frame
      if (service.serviceUuid == Guid('7a230001-5475-a6a4-654c-8431f6ad49c4')) {
        _log.fine("Found Frame service");
        for (var characteristic in service.characteristics) {
          if (characteristic.characteristicUuid ==
              Guid('7a230002-5475-a6a4-654c-8431f6ad49c4')) {
            _log.fine("Found Frame TX characteristic");
            finalDevice._txChannel = characteristic;
          }
          if (characteristic.characteristicUuid ==
              Guid('7a230003-5475-a6a4-654c-8431f6ad49c4')) {
            _log.fine("Found Frame RX characteristic");
            finalDevice._rxChannel = characteristic;

            await characteristic.setNotifyValue(true);
            _log.fine("Enabled RX notifications");

            finalDevice.maxStringLength = device.mtuNow - 3;
            finalDevice.maxDataLength = device.mtuNow - 4;
            _log.fine("Max string length: ${finalDevice.maxStringLength}");
            _log.fine("Max data length: ${finalDevice.maxDataLength}");
          }
        }
      }

      // If DFU
      if (service.serviceUuid == Guid('fe59')) {
        _log.fine("Found DFU service");
        for (var characteristic in service.characteristics) {
          if (characteristic.characteristicUuid ==
              Guid('8ec90001-f315-4f60-9fb8-838830daea50')) {
            _log.fine("Found DFU control characteristic");
            finalDevice._dfuControl = characteristic;
            await characteristic.setNotifyValue(true);
            _log.fine("Enabled DFU control notifications");
          }
          if (characteristic.characteristicUuid ==
              Guid('8ec90002-f315-4f60-9fb8-838830daea50')) {
            _log.fine("Found DFU packet characteristic");
            finalDevice._dfuPacket = characteristic;
          }
        }
      }
    }

    if (finalDevice._txChannel != null && finalDevice._rxChannel != null) {
      finalDevice.state = BrilliantConnectionState.connected;
      return finalDevice;
    }

    if (finalDevice._dfuControl != null && finalDevice._dfuPacket != null) {
      finalDevice.state = BrilliantConnectionState.dfuConnected;
      return finalDevice;
    }

    throw ("Incomplete set of services found");
  }
}

</DOCUMENT>
<DOCUMENT filename="main.dart">
import 'package:audio_session/audio_session.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:flutter_foreground_task/flutter_foreground_task.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter/material.dart';
import 'package:noa/bluetooth.dart';
import 'package:noa/pages/splash.dart';
import 'package:noa/util/app_log.dart';
import 'package:noa/util/foreground_service.dart';
import 'package:noa/util/location.dart';

final globalPageStorageBucket = PageStorageBucket();

void main() async {
  // Load environment variables
  await dotenv.load();

  // Start logging
  final container = ProviderContainer();
  container.read(appLog);

  // Set up Android foreground service
  initializeForegroundService();

  // Request bluetooth permission
  BrilliantBluetooth.requestPermission();

  // Start location stream
  Location.startLocationStream();
  
  _setupAudioSession();

  runApp(UncontrolledProviderScope(
    container: container,
    child: const MainApp(),
  ));
}

void _setupAudioSession() {
  AudioSession.instance.then((audioSession) async {
    await audioSession.configure(const AudioSessionConfiguration(
      avAudioSessionCategory: AVAudioSessionCategory.playback,
      avAudioSessionCategoryOptions:
          AVAudioSessionCategoryOptions.mixWithOthers,
      avAudioSessionMode: AVAudioSessionMode.spokenAudio,
      avAudioSessionRouteSharingPolicy:
          AVAudioSessionRouteSharingPolicy.defaultPolicy,
      avAudioSessionSetActiveOptions: AVAudioSessionSetActiveOptions.none,
      androidAudioAttributes: AndroidAudioAttributes(
        contentType: AndroidAudioContentType.speech,
        flags: AndroidAudioFlags.none,
        usage: AndroidAudioUsage.assistant,
      ),
      androidAudioFocusGainType: AndroidAudioFocusGainType.gain,
      androidWillPauseWhenDucked: true,
    ));
    audioSession.setActive(true);
  });
}

class MainApp extends StatelessWidget {
  const MainApp({super.key});

  @override
  Widget build(BuildContext context) {
    startForegroundService();
    return const WithForegroundTask(
        child: MaterialApp(
      debugShowCheckedModeBanner: false,
      home: SplashPage(),
    ));
  }
}

</DOCUMENT>
<DOCUMENT filename="noa_api.dart">
import 'dart:async';
import 'dart:convert';
import 'dart:io';
import 'package:flutter/foundation.dart';
import 'package:http/http.dart' as http;
import 'package:image/image.dart';
import 'package:just_audio/just_audio.dart';
import 'package:logging/logging.dart';
import 'package:noa/util/bytes_to_wav.dart';
import 'package:noa/util/location.dart';
import 'package:path_provider/path_provider.dart';

final _log = Logger("Noa API");

class NoaApiServerException implements Exception {
  String reason;
  int statusCode;

  NoaApiServerException({
    required this.reason,
    required this.statusCode,
  });

  @override
  String toString() {
    return "NoaApiServerException: $statusCode: $reason";
  }
}

enum NoaApiAuthProvider {
  google('google'),
  apple('apple'),
  discord('discord');

  const NoaApiAuthProvider(this.value);
  final String value;
}

class NoaUser {
  late String email;
  late String plan;
  late int creditsUsed;
  late int maxCredits;

  NoaUser({
    String? email,
    String? plan,
    int? creditsUsed,
    int? maxCredits,
  }) {
    this.email = email ?? "Not logged in";
    this.plan = plan ?? "";
    this.creditsUsed = creditsUsed ?? 0;
    this.maxCredits = maxCredits ?? 0;
  }
}

// Noa messaging class
enum NoaRole {
  system('system'),
  user('user'),
  noa('noa');

  const NoaRole(this.value);
  final String value;
}

class NoaMessage {
  String message;
  NoaRole from;
  DateTime time;
  Uint8List? image;
  bool exclude = false;
  bool topicChanged = false;

  NoaMessage({
    required this.message,
    required this.from,
    required this.time,
    this.image,
    this.exclude = false,
    this.topicChanged = false,
  });

  Map<String, dynamic> toJson() {
    return {
      "role": from == NoaRole.noa ? "assistant" : "user",
      "content": message,
    };
  }
}

// All API endpoint features
class NoaApi {
  static Future<String> signIn(
    String id,
    NoaApiAuthProvider provider,
  ) async {
    _log.info("Signing in to Noa");
    _log.fine("Provider: $provider, ID token: $id");
    try {
      final response = await http.post(
        Uri.parse('https://api.brilliant.xyz/noa/user/signin'),
        body: {
          'id_token': id,
          'provider': provider.value,
        },
      );

      if (response.statusCode != 200) {
        throw NoaApiServerException(
          reason: response.body,
          statusCode: response.statusCode,
        );
      }

      final decoded = jsonDecode(response.body);

      return decoded['token'];
    } catch (error) {
      _log.warning(error);
      return Future.error(error);
    }
  }

  static Future<void> signOut(
    String userAuthToken,
  ) async {
    _log.info("Signing out");
    try {
      final response = await http.post(
        Uri.parse('https://api.brilliant.xyz/noa/user/signout'),
        headers: {"Authorization": userAuthToken},
      );

      if (response.statusCode != 200) {
        throw NoaApiServerException(
          reason: response.body,
          statusCode: response.statusCode,
        );
      }
    } catch (error) {
      _log.warning(error);
      return Future.error(error);
    }
  }

  static Future<NoaUser> getUser(String userAuthToken) async {
    _log.info("Getting user info");
    try {
      final response = await http.get(
        Uri.parse('https://api.brilliant.xyz/noa/user'),
        headers: {"Authorization": userAuthToken},
      );

      if (response.statusCode != 200) {
        throw NoaApiServerException(
          reason: response.body,
          statusCode: response.statusCode,
        );
      }

      final body = jsonDecode(response.body);
      final email = body['user']['email'];
      final plan = body['user']['plan'];
      final creditsUsed = body['user']['credit_used'];
      final maxCredits = body['user']['credit_total'];

      _log.info(
          "Got user account info: Email: $email, plan: $plan, credits: $creditsUsed/$maxCredits");

      return NoaUser(
        email: email,
        plan: plan,
        creditsUsed: creditsUsed,
        maxCredits: maxCredits,
      );
    } catch (error) {
      _log.warning(error);
      return Future.error(error);
    }
  }

  static Future<void> deleteUser(
    String userAuthToken,
  ) async {
    _log.info("Deleting user");
    try {
      final response = await http.post(
        Uri.parse('https://api.brilliant.xyz/noa/user/delete'),
        headers: {"Authorization": userAuthToken},
      );

      if (response.statusCode != 200) {
        throw NoaApiServerException(
          reason: response.body,
          statusCode: response.statusCode,
        );
      }
    } catch (error) {
      _log.warning(error);
      return Future.error(error);
    }
  }

  static Future<List<NoaMessage>> getMessage(
    String userAuthToken,
    Uint8List audio,
    Uint8List image,
    String systemRole,
    double temperature,
    List<NoaMessage> noaHistory,
    bool textToSpeech,
    String apiEndpoint,
    String apiToken,
    String apiHeader,
    bool isCustomServerEnabled,
    bool promptless,
  ) async {
    try {
      String endPoint = 'https://api.brilliant.xyz/noa';
      String token = userAuthToken;
      String header = "Authorization";

      if (apiEndpoint.isEmpty && isCustomServerEnabled) {
        throw NoaApiServerException(
          reason: "Custom server enabled but no endpoint provided",
          statusCode: 400,
        );
      }
      if (isCustomServerEnabled) {
        endPoint = apiEndpoint;
        token = apiToken;
        header = apiHeader;
      }
      
      var request = http.MultipartRequest(
        'POST',
        Uri.parse(endPoint),
      );

      request.headers.addAll({header: token});

      request.files.add(http.MultipartFile.fromBytes(
        'audio',
        bytesToWav(audio, 8, 8000),
        filename: 'audio.wav',
      ));

      try {
        image = encodeJpg(copyRotate(decodeJpg(image)!, angle: -90));

        request.files.add(http.MultipartFile.fromBytes(
          'image',
          image,
          filename: 'image.jpg',
        ));
      } catch (error) {
        _log.warning(error);
      }
      noaHistory = noaHistory.where((msg) => !msg.exclude).toList();
      if (!isCustomServerEnabled) {
        request.fields['noa_system_prompt'] = systemRole;
        request.fields['temperature'] = temperature.toString();
        request.fields['tts'] = textToSpeech ? "1" : "0";
        request.fields['promptless'] = promptless ? "1" : "0";
      }
      request.fields['messages'] = jsonEncode(noaHistory);
      request.fields['location'] = await Location.getAddress();
      request.fields['time'] = DateTime.now().toString();

      _log.info(
          "Sending message request: audio[${audio.length}], image[${image.length}], ${request.fields.toString()}");

      var streamedResponse = await request.send();

      if (streamedResponse.statusCode != 200) {
        throw NoaApiServerException(
          reason: streamedResponse.reasonPhrase ?? "",
          statusCode: streamedResponse.statusCode,
        );
      }

      List<int> serverResponse = List.empty(growable: true);
      await streamedResponse.stream
          .forEach((element) => serverResponse += element);
      var body = jsonDecode(utf8.decode(serverResponse));
      List<NoaMessage> response = List.empty(growable: true);
      final topicChanged = body["debug"]['topic_changed']??false;

      response.add(NoaMessage(
        message: body['user_prompt'].toString().replaceAll(RegExp(r'â€”'), '-'),
        from: NoaRole.user,
        time: DateTime.now(),
        image: kReleaseMode ? null : image,
        topicChanged: topicChanged
      ));

      response.add(NoaMessage(
        message: body['message'].toString().replaceAll(RegExp(r'â€”'), '-'),
        from: NoaRole.noa,
        time: DateTime.now(),
        image: body['image'] != null ? base64.decode(body['image']) : null,
      ));

      _log.info(
          "Received response. User: \"${body['user_prompt']}\". Noa: \"${body['message']}\". Debug: ${body['debug']}");

      if (textToSpeech && body['audio'] != null) {
        _playAudio(base64.decode(body['audio']));
      }

      return response;
    } catch (error) {
      _log.warning(error);
      return Future.error(error);
    }
  }

  static Future<List<NoaMessage>> getWildcardMessage(
    String userAuthToken,
    String systemRole,
    double temperature,
    bool textToSpeech,
  ) async {
    try {
      var request = http.MultipartRequest(
        'POST',
        Uri.parse('https://api.brilliant.xyz/noa/wildcard'),
      );

      request.headers.addAll({HttpHeaders.authorizationHeader: userAuthToken});

      request.fields['noa_system_prompt'] = systemRole;
      request.fields['location'] = await Location.getAddress();
      request.fields['time'] = DateTime.now().toString();
      request.fields['temperature'] = temperature.toString();
      request.fields['tts'] = textToSpeech ? "1" : "0";

      _log.info("Sending wildcard request: ${request.fields.toString()}");

      var streamedResponse = await request.send();

      if (streamedResponse.statusCode != 200) {
        throw NoaApiServerException(
          reason: streamedResponse.reasonPhrase ?? "",
          statusCode: streamedResponse.statusCode,
        );
      }

      List<int> serverResponse = List.empty(growable: true);
      await streamedResponse.stream
          .forEach((element) => serverResponse += element);
      var body = jsonDecode(utf8.decode(serverResponse));

      List<NoaMessage> response = List.empty(growable: true);

      response.add(NoaMessage(
        message: "Wildcard ðŸ‘»",
        from: NoaRole.user,
        time: DateTime.now(),
      ));

      response.add(NoaMessage(
        message: body['message'].toString().replaceAll(RegExp(r'â€”'), '-'),
        from: NoaRole.noa,
        time: DateTime.now(),
      ));

      _log.info(
          "Received wildcard response. User: \"${body['user_prompt']}\". Noa: \"${body['message']}\". Debug: ${body['debug']}");

      if (textToSpeech && body['audio'] != null) {
        _playAudio(base64.decode(body['audio']));
      }

      return response;
    } catch (error) {
      _log.warning(error);
      return Future.error(error);
    }
  }

  static void _playAudio(Uint8List audio) async {
    _log.info("Playing ${audio.length} bytes of audio");

    final tempDir = await getTemporaryDirectory();
    File file = await File('${tempDir.path}/audio.mp3').create();
    file.writeAsBytesSync(audio);

    try {
      AudioPlayer player = AudioPlayer(handleAudioSessionActivation: false);
      await player.setAudioSource(AudioSource.file(file.path));
      await player.play();
      await player.dispose();
    } catch (error) {
      _log.warning("Error playing audio. $error");
    }
  }
}
</DOCUMENT>
<DOCUMENT filename="style.dart">
import 'package:flutter/material.dart';

const Color colorWhite = Color(0xFFFFFFFF);
const Color colorLight = Color(0xFFB6BEC9);
const Color colorPink = Color(0xFFF288BF);
const Color colorRed = Color(0xFFDC0000);
const Color colorDark = Color(0xFF292929);

const TextStyle textStyleWhiteTitle = TextStyle(
  fontFamily: 'SF Pro Display',
  color: colorWhite,
  fontSize: 18,
  fontWeight: FontWeight.w900,
);

const TextStyle textStyleLightTitle = TextStyle(
  fontFamily: 'SF Pro Display',
  color: colorLight,
  fontSize: 18,
  fontWeight: FontWeight.w900,
);

const TextStyle textStyleDarkTitle = TextStyle(
  fontFamily: 'SF Pro Display',
  color: colorDark,
  fontSize: 18,
  fontWeight: FontWeight.w900,
);

const TextStyle textStyleLightHeading = TextStyle(
  fontFamily: 'SF Pro Display',
  color: colorWhite,
  fontSize: 32,
  fontWeight: FontWeight.w200,
);

const TextStyle textStyleLightSubHeading = TextStyle(
  fontFamily: 'SF Pro Display',
  color: colorLight,
  fontSize: 14,
  fontWeight: FontWeight.w900,
);

const TextStyle textStyleWhite = TextStyle(
  fontFamily: 'SF Pro Display',
  color: colorWhite,
  fontSize: 14,
  fontWeight: FontWeight.w300,
);

const TextStyle textStyleLight = TextStyle(
  fontFamily: 'SF Pro Display',
  color: colorLight,
  fontSize: 14,
  fontWeight: FontWeight.w300,
);

const TextStyle textStylePink = TextStyle(
  fontFamily: 'SF Pro Display',
  color: colorPink,
  fontSize: 14,
  fontWeight: FontWeight.w300,
);

const TextStyle textStyleRed = TextStyle(
  fontFamily: 'SF Pro Display',
  color: colorRed,
  fontSize: 14,
  fontWeight: FontWeight.w300,
);

const TextStyle textStyleDark = TextStyle(
  fontFamily: 'SF Pro Display',
  color: colorDark,
  fontSize: 14,
  fontWeight: FontWeight.w300,
);

const TextStyle textStyleWhiteWidget = TextStyle(
  fontFamily: 'SF Pro Display',
  color: colorWhite,
  fontSize: 14,
  fontWeight: FontWeight.w900,
);

const TextStyle textStyleDarkWidget = TextStyle(
  fontFamily: 'SF Pro Display',
  color: colorDark,
  fontSize: 14,
  fontWeight: FontWeight.w900,
);

</DOCUMENT>
